options
{
    JAVA_UNICODE_ESCAPE = true;
    //LOOKAHEAD=3;
    STATIC=false;
}

PARSER_BEGIN(GParser)

package grammar;

import nodes.*;
import rule.*;
import java.util.*;

public class GParser
{
 
}
PARSER_END(GParser)

SKIP :
{
    " "  |   "\r"  |  "\n"  |  "\t"
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMI: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < QUOTE: "'" >
| < EQ: "=">
| < STAR: "*">
| < PLUS: "+">
| < QUES: "?">

}

TOKEN:
{
  <TOKEN_: "token">
}

TOKEN:
{
  <IDENT: <CHAR> ( <CHAR> | ["0"-"9"] | "_" )*>
| <#CHAR: ["a"-"z","A"-"Z"]>
}

Tree tree():
{
  Tree tree=new Tree();
}
{
  (tokenDecl(tree))*  (ruleDecl(tree))+
  {return tree;}
}

void tokenDecl(Tree tree):
{
  String name;
}
{
  "token" (name=name(){tree.add(new TokenDecl(name));})+ ";"
}

void ruleDecl(Tree tree):
{
  RuleDecl decl=new RuleDecl();
  String name;
  Rule rhs;
}
{
  name=name() ("="|":") rhs=rhs()  ";"
  {
  tree.add(decl);
  decl.rhs=rhs;
  }
}

//or series
Rule rhs():
{
  Rule rule;
  OrRule or=new OrRule();
  boolean more=false;
}
{
  (rule=rhs_list(){or.add(rule);}
   ("|" rule=rhs_list(){
   or.add(rule);
   more=true;
   })*)
   {return more?or:rule;}
}

//sequence no or
Rule rhs_list():
{
  Sequence s=new Sequence();
  Rule r;
}
{
  (r=regex(){s.add(r);})+
  {return s.normal();}
}

Rule regex():
{
  Rule rule;
}
{
  (rule=simple()
   ("*"{return new StarRule(rule);}
  | "+"{return new PlusRule(rule);}
  | "?"{return new OptionalRule(rule);})?)
     {return rule;}
}

Rule simple():
{
  Rule rule;
}
{
  (rule=groupRule() | rule=nameRule()){return rule;}
}

Rule groupRule():
{
  GroupRule group=new GroupRule();
  Rule rule;
}
{
  "(" rule=rhs() ")"
  {
    group.rhs=rule;
    return group;
  }
}

Rule nameRule():
{
  String name;
}
{
  name=name(){return new RuleRef(name);}
}

String name():
{
  Token token;
}
{
  token=<IDENT>{return token.image;}
}
