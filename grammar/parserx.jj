options
{
    JAVA_UNICODE_ESCAPE = true;
    //LOOKAHEAD=3;
    STATIC = false;
}

PARSER_BEGIN(GParser)

package grammar;

import nodes.*;
import rule.*;
import utils.*;
import java.io.*;

public class GParser
{

}

PARSER_END(GParser)

SKIP :
{
    " "  |   "\r"  |  "\n"  |  "\t"
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
//| < LBRACKET: "[" >
//| < RBRACKET: "]" >
| < SEMI: ";" >
| < COLON: ":" >
| < DOT: ".">
| < COMMA: "," >
| < QUOTE: "'" >
| < EQ: "=">
| <COLONEQEQ: ":==">
| <COLONEQ: ":=">
| < STAR: "*">
| < PLUS: "+">
| < QUES: "?">
| < XOR: "^">//negation
| < TILDE: "~">//read until
| < HASH: "#">
}

TOKEN:
{
  <KEYWORD_TOKEN: "token">
| <KEYWORD_TOKENS: "tokens">
| <KEYWORD_SKIP: "skip">
| <STRING_LITERAL: "\"" (~["\r","\n","\""] | "\\\"")* "\"">
| <INCLUDE_DIRECTIVE: "include">
| <START_SIRECTIVE: "@start">
}

TOKEN:
{
  <IDENT: <CHAR> ( <CHAR> | ["0"-"9"] | "_" )* >
| <#CHAR: ["a"-"z","A"-"Z"]>
//| <#ESCAPED: ("\\" ["r","n","t","s"])>
//| <BRACKET_LIST: "[" ("^")? (<ESCAPED> | (<CHAR>))+ "]">
| <BRACKET_LIST: "["  (~["]"])* "]">
}


//--------parser rules-------------------
Tree tree(File file):
{
  Tree tree=new Tree();
  tree.file=file;
}
{
  (includeStatement(tree))*
  (tokenBlock(tree) | skipBlock(tree))*
  [startDecl(tree)]
  (ruleDecl(tree))*
  {
    return tree;
  }
}

void includeStatement(Tree tree):
{
  Token tok;
}
{
  "include" tok=<STRING_LITERAL>
  {
    tree.addInclude(UnicodeUtils.trimQuotes(tok.image));
  }
}

//lexer rules

void tokenBlock(Tree tree):
{
}
{
 "token" "{" tokenList(tree,false) "}"
}

void tokenList(Tree tree, boolean skip):
{}
{
 (tokenDecl(tree,skip))*
}

void tokenDecl(Tree tree,boolean skip):
{
  String name;
  boolean frag=false;
  TokenDecl decl;
  Node rhs;
}
{
  ("#"{frag=true;})? name=name() "=" rhs = rhs()
  {
    decl=new TokenDecl(name);
    decl.fragment=frag;
    decl.regex = rhs;
    if(skip){tree.addSkip(decl);}
    else{tree.addToken(decl);}
  }
}

void skipBlock(Tree tree):
{
}
{
 "skip" "{" tokenList(tree,true) "}"
}

Node rhs():
{
  Node rule;
  OrNode or=new OrNode();
  boolean more=false;
}
{
  rule=rhs_list(){or.add(rule);}
   ("|" rule=rhs_list()
    {
      or.add(rule);
      more=true;
    })*
   { return more?or:rule; }
}

Node rhs_list():
{
  Sequence s = new Sequence();
  Node r;
}
{
  (r=regex(){s.add(r);})+
  {return s.normal();}
}

Node regex():
{
  Node rule;
  RegexNode regex;
}
{
  rule=simple(){regex=new RegexNode(rule);}
   (("*"{regex.star=true;}
  | "+"{regex.plus=true;}
  | "?"{regex.optional=true;}){return regex;})?
     {return rule;}
}

Node simple():
{
  Node rule;
}
{
  (rule=group()
   | rule=ref()
   | rule=stringNode()
   | rule=bracketNode()
   | rule=untilNode()
   | rule=dotNode()){return rule;}
}

Node dotNode():
{}
{
  <DOT>{
    StringNode str=new StringNode();
    str.isDot=true;
    return str;
  }
}
//[a-z]
Node bracketNode():
{
  Bracket b=new Bracket();
  Token t;
}
{
  t=<BRACKET_LIST>
  {
    b.parse(t.image);
    return b;
  }
}


Node group():
{
  Node rule;
}
{
  "(" rule = rhs(){ return new GroupNode(rule); } ")"
}

Node untilNode():
{
  Node node;
}
{
  "~" node = regex() {return new UntilNode(node);}
}

//--------------------------------
//parser rules

void declSeparator():
{}
{
  "=" | ":" | ":==" | ":="
}

void ruleDecl(Tree tree):
{
  RuleDecl decl=new RuleDecl();
  String name;
  Node rhs;
}
{
  name=name() declSeparator() rhs=rhs()  ";"
  {
    decl.name=name;
    decl.rhs=rhs;
    tree.addRule(decl);
  }
}

void startDecl(Tree tree):
{
 NameNode rhs;
}
{
  <START_SIRECTIVE> ("=" | ":") rhs = ref() ";"
  {tree.start=rhs;}
}



Node stringNode():
{
  Token tok;
}
{
  tok=<STRING_LITERAL>
  {
    return StringNode.from(tok.image);
  }
}

NameNode lexerRef():
{
  String name;
}
{
 "{" name=name(){return new NameNode(name,true);} "}"
}

NameNode ref():
{
  String name;
  NameNode ref;
}
{
  (name = name(){ref = new NameNode(name);} | ref = lexerRef() )
  {
    return ref;
  }
}

String name():
{
  Token token;
}
{
  token=<IDENT>{return token.image;}
}
