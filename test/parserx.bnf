tree::= includeStatement*
        (tokenBlock  | skipBlock)*
        startDecl?
        ruleDecl*;

includeStatement::= "include" <STRING_LITERAL>;

tokenBlock::= "token" "{" tokenList "}";

skipBlock::= "skip" "{" tokenList "}";

tokenList::= tokenDecl*;

declSeparator::= ":" | "=" | ":=" | ":==";
tokenDecl::= "#"? name declSeparator rhs;

rhs::= rhs_list ("|" rhs_list)*;
rhs_list::= regex+;
regex::= simple ("*" | "+" | "?")?
simple::= group | ref | stringNode | bracketNode | untilNode | dotNode;
group::="(" rhs ")";
stringNode::= <STRING_LITERAL>
bracketNode::= <BRACKET_LIST>//easier to handle as token
untilNode::= "~" regex;
dotNode::= "."

startDecl::="@start" "=" name;

ruleDecl::= name declSeparator rhs;

lexerRef::= "{" name "}";
name::=<IDENT>;