
//----------------------------------------------------
// The following code was generated by jh-javacup-1.0 20160720
// Fri Mar 27 08:47:09 UTC 2020
//----------------------------------------------------

package grammar;

import com.github.jhoenicke.javacup.runtime.*;
import nodes.*;
import rule.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

/** jh-javacup-1.0 20160720 generated parser.
  * @version Fri Mar 27 08:47:09 UTC 2020
  */
public class parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\100\000\002\001\002\002\003\006\001\004\004" +
    "\015\001\015\001\015\001\015\001\015\001\007" +
    "\002\007\002\010\002\010\002\011\002\011\002" +
    "\012\003\016\001\013\002\014\002\023\001\023" +
    "\002\020\000\017\002\022\000\021\001\021\002" +
    "\026\001\026\002\025\000\024\001\024\002\047" +
    "\063\175\061\057\125\243\163\241\055\127\053" +
    "\073\071\051\047\205\155\067\u0133\237\u0123\u0117" +
    "\u010b\207\377\157\115\161\u012b\177\363\347\333" +
    "\317\303\267\065\253\127\u0151\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\047\001\016\006\015\004\012\060\010" +
    "\002\003\062\002\021\000\056\044\012\021\066" +
    "\014\004\013\064\016\006\016\006\012\060\012" +
    "\060\003\003\003\023\000\003\000\056\044\012" +
    "\021\066\014\023\013\064\004\062\032\111\046" +
    "\042\046\042\046\042\032\045\046\042\011\041" +
    "\032\047\011\041\046\042\046\042\004\023\046" +
    "\042\031\103\031\105\031\107\020\074\031\024" +
    "\033\111\006\035\020\045\031\024\031\024\020" +
    "\047\031\024\027\075\027\077\027\101\017\054" +
    "\027\022\035\115\001\013\047\001\027\022\027" +
    "\022\017\054\027\022\023\044\023\044\023\044" +
    "\047\001\023\044\007\010\005\052\047\001\023" +
    "\044\023\044\045\100\023\044\007\037\005\052" +
    "\045\100\045\100\043\040\045\100\047\001\047" +
    "\001\043\040\043\040\042\034\043\040\047\001" +
    "\047\001\042\034\042\034\041\030\042\034\047" +
    "\001\047\001\041\030\041\030\040\036\041\030" +
    "\047\001\047\001\040\036\040\036\037\032\040" +
    "\036\047\001\047\001\037\032\037\032\036\026" +
    "\037\032\047\001\047\001\036\026\036\026\030" +
    "\076\036\026\047\001\047\001\030\076\030\076" +
    "\026\020\030\076\047\001\047\001\026\020\026" +
    "\020\025\016\026\020\047\001\047\001\025\016" +
    "\025\016\024\014\025\016\047\001\047\001\024" +
    "\014\024\014\047\001\024\014\034\045\034\115" +
    "\047\001\034\047\022\045\022\074\047\001\022" +
    "\047\047\001\105\011\000\001\003\035\012\006" +
    "\013\021\010\002\003\004\020\001\001\037\001" +
    "\026\007\014\015\001\001\003\004\066\001\056" +
    "\024\025\026\027\013\001\030\031\001\024\025" +
    "\026\027\034\035\030\031\014\015\001\001\001" +
    "\032\033\024\025\026\027\001\001\045\031\024" +
    "\025\026\027\001\001\045\031"
    };
  }

  /** Instance of action encapsulation class. */
  protected CUP$parser$action action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$action(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList        stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



    public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol){
        System.out.println(message+ "\nCan't recover from previous error(s), giving up. @"+(Symbol)info);
      }
      else{
        System.out.println(message + "\nCan't recover from previous error(s), giving up. @"+cur_token);
      }
      //System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         System.out.println(message+" @"+((Symbol)info).value);
      else
         System.out.println(message+" @"+cur_token.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$action {


  Tree tree=new Tree();

  private final parser parser;

  /** Constructor */
  CUP$parser$action(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList            CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= tree EOF 
          case 0:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$rhs$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int CUP$rhsleft = CUP$rhs$.left;
              int CUP$rhsright = CUP$rhs$.right;
              Node CUP$rhs = (Node) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // tree ::= tokenDecl* ruleDecl* 
          case 1:
            {
              Node RESULT;
RESULT=tree;
              return parser.getSymbolFactory().newSymbol("tree", 1, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // tokenDecl ::= TOKEN nameList SEMI 
          case 2:
            {
              return parser.getSymbolFactory().newSymbol("tokenDecl", 2, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)));
            }

          // nameList ::= IDENT+ 
          case 3:
            {
              com.github.jhoenicke.javacup.runtime.Symbol arr$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int arrleft = arr$.left;
              int arrright = arr$.right;
              java.util.ArrayList CUP$list$arr = (java.util.ArrayList) arr$.value;
              String[] arr = (String[]) CUP$list$arr.toArray(new String[CUP$list$arr.size()]);

    for(String tn:arr){
      System.out.println("tn="+tn);
      tree.add(new TokenDecl(tn));
    }
  
              return parser.getSymbolFactory().newSymbol("nameList", 6, arr$, arr$);
            }

          // ruleDecl ::= IDENT eqOrColon single* SEMI 
          case 4:
            {
              RuleDecl RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol a$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int aleft = a$.left;
              int aright = a$.right;
              java.util.ArrayList CUP$list$a = (java.util.ArrayList) a$.value;
              Rule[] a = (Rule[]) CUP$list$a.toArray(new Rule[CUP$list$a.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 4));
              int nleft = n$.left;
              int nright = n$.right;
              String n = (String) n$.value;

     RESULT=new RuleDecl(n);
     RESULT.addAll((List)Arrays.asList(a));
     tree.add(RESULT);
     
              return parser.getSymbolFactory().newSymbol("ruleDecl", 4, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // single ::= starRule 
          case 5:
            {
              Rule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int sleft = s$.left;
              int sright = s$.right;
              StarRule s = (StarRule) s$.value;
RESULT=s;
              return parser.getSymbolFactory().newSymbol("single", 13, s$, s$, RESULT);
            }

          // single ::= plusRule 
          case 6:
            {
              Rule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol p$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int pleft = p$.left;
              int pright = p$.right;
              PlusRule p = (PlusRule) p$.value;
RESULT=p;
              return parser.getSymbolFactory().newSymbol("single", 13, p$, p$, RESULT);
            }

          // single ::= optionalRule 
          case 7:
            {
              Rule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol o$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int oleft = o$.left;
              int oright = o$.right;
              OptionalRule o = (OptionalRule) o$.value;
RESULT=o;
              return parser.getSymbolFactory().newSymbol("single", 13, o$, o$, RESULT);
            }

          // single ::= groupRule 
          case 8:
            {
              Rule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol g$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int gleft = g$.left;
              int gright = g$.right;
              GroupRule g = (GroupRule) g$.value;
RESULT=g;
              return parser.getSymbolFactory().newSymbol("single", 13, g$, g$, RESULT);
            }

          // single ::= nameRule 
          case 9:
            {
              Rule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int nleft = n$.left;
              int nright = n$.right;
              Rule n = (Rule) n$.value;
RESULT=n;
              return parser.getSymbolFactory().newSymbol("single", 13, n$, n$, RESULT);
            }

          // starRule ::= groupRule STAR 
          case 10:
            {
              StarRule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol g$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int gleft = g$.left;
              int gright = g$.right;
              GroupRule g = (GroupRule) g$.value;
RESULT=new StarRule(g);
              return parser.getSymbolFactory().newSymbol("starRule", 7, g$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // starRule ::= nameRule STAR 
          case 11:
            {
              StarRule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int nleft = n$.left;
              int nright = n$.right;
              Rule n = (Rule) n$.value;
RESULT=new StarRule(n);
              return parser.getSymbolFactory().newSymbol("starRule", 7, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // plusRule ::= groupRule PLUS 
          case 12:
            {
              PlusRule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol g$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int gleft = g$.left;
              int gright = g$.right;
              GroupRule g = (GroupRule) g$.value;
RESULT=new PlusRule(g);
              return parser.getSymbolFactory().newSymbol("plusRule", 8, g$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // plusRule ::= nameRule PLUS 
          case 13:
            {
              PlusRule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int nleft = n$.left;
              int nright = n$.right;
              Rule n = (Rule) n$.value;
RESULT=new PlusRule(n);
              return parser.getSymbolFactory().newSymbol("plusRule", 8, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // optionalRule ::= groupRule QUES 
          case 14:
            {
              OptionalRule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol g$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int gleft = g$.left;
              int gright = g$.right;
              GroupRule g = (GroupRule) g$.value;
RESULT=new OptionalRule(g);
              return parser.getSymbolFactory().newSymbol("optionalRule", 9, g$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // optionalRule ::= nameRule QUES 
          case 15:
            {
              OptionalRule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int nleft = n$.left;
              int nright = n$.right;
              Rule n = (Rule) n$.value;
RESULT=new OptionalRule(n);
              return parser.getSymbolFactory().newSymbol("optionalRule", 9, n$, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // groupRule ::= LPAREN single* RPAREN 
          case 16:
            {
              GroupRule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol a$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int aleft = a$.left;
              int aright = a$.right;
              java.util.ArrayList CUP$list$a = (java.util.ArrayList) a$.value;
              Rule[] a = (Rule[]) CUP$list$a.toArray(new Rule[CUP$list$a.size()]);

     RESULT=new GroupRule();
     RESULT.addAll(Arrays.asList(a));
   
              return parser.getSymbolFactory().newSymbol("groupRule", 10, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 3)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)), RESULT);
            }

          // nameRule ::= IDENT 
          case 17:
            {
              Rule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol n$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int nleft = n$.left;
              int nright = n$.right;
              String n = (String) n$.value;
RESULT=new RuleRef(n);
              return parser.getSymbolFactory().newSymbol("nameRule", 14, n$, n$, RESULT);
            }

          // orRule ::= single orSingle+ 
          case 18:
            {
              OrRule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol r$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int rleft = r$.left;
              int rright = r$.right;
              java.util.ArrayList CUP$list$r = (java.util.ArrayList) r$.value;
              Rule[] r = (Rule[]) CUP$list$r.toArray(new Rule[CUP$list$r.size()]);
              com.github.jhoenicke.javacup.runtime.Symbol l$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              int lleft = l$.left;
              int lright = l$.right;
              Rule l = (Rule) l$.value;

   RESULT=new OrRule();
   RESULT.add(l);
   RESULT.addAll((List)Arrays.asList(r));
   
              return parser.getSymbolFactory().newSymbol("orRule", 11, l$, r$, RESULT);
            }

          // orSingle ::= OR single 
          case 19:
            {
              Rule RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              int sleft = s$.left;
              int sright = s$.right;
              Rule s = (Rule) s$.value;
RESULT=s;
              return parser.getSymbolFactory().newSymbol("orSingle", 12, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), s$, RESULT);
            }

          // IDENT+ ::= IDENT 
          case 20:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              java.util.ArrayList RESULT = new java.util.ArrayList();
              RESULT.add((String) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("IDENT+", 19, CUP$0, CUP$0, RESULT);
            }

          // IDENT+ ::= IDENT+ IDENT 
          case 21:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              java.util.ArrayList RESULT = (java.util.ArrayList) CUP$0.value;
              RESULT.add((String) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("IDENT+", 19, CUP$0, CUP$1, RESULT);
            }

          // tokenDecl* ::= 
          case 22:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              return parser.getSymbolFactory().newSymbol("tokenDecl*", 16, CUP$sym, CUP$sym);
            }

          // tokenDecl+ ::= tokenDecl+ tokenDecl 
          case 23:
            {
              return parser.getSymbolFactory().newSymbol("tokenDecl+", 15, ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2)), ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1)));
            }

          // ruleDecl* ::= 
          case 24:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              return parser.getSymbolFactory().newSymbol("ruleDecl*", 18, CUP$sym, CUP$sym, new java.util.ArrayList());
            }

          // ruleDecl+ ::= ruleDecl 
          case 25:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              java.util.ArrayList RESULT = new java.util.ArrayList();
              RESULT.add((RuleDecl) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("ruleDecl+", 17, CUP$0, CUP$0, RESULT);
            }

          // ruleDecl+ ::= ruleDecl+ ruleDecl 
          case 26:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              java.util.ArrayList RESULT = (java.util.ArrayList) CUP$0.value;
              RESULT.add((RuleDecl) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("ruleDecl+", 17, CUP$0, CUP$1, RESULT);
            }

          // orSingle+ ::= orSingle 
          case 27:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              java.util.ArrayList RESULT = new java.util.ArrayList();
              RESULT.add((Rule) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("orSingle+", 22, CUP$0, CUP$0, RESULT);
            }

          // orSingle+ ::= orSingle+ orSingle 
          case 28:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              java.util.ArrayList RESULT = (java.util.ArrayList) CUP$0.value;
              RESULT.add((Rule) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("orSingle+", 22, CUP$0, CUP$1, RESULT);
            }

          // single* ::= 
          case 29:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              return parser.getSymbolFactory().newSymbol("single*", 21, CUP$sym, CUP$sym, new java.util.ArrayList());
            }

          // single+ ::= single 
          case 30:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              java.util.ArrayList RESULT = new java.util.ArrayList();
              RESULT.add((Rule) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("single+", 20, CUP$0, CUP$0, RESULT);
            }

          // single+ ::= single+ single 
          case 31:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 1));
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = ((com.github.jhoenicke.javacup.runtime.Symbol) CUP$stack.get(CUP$size - 2));
              java.util.ArrayList RESULT = (java.util.ArrayList) CUP$0.value;
              RESULT.add((Rule) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("single+", 20, CUP$0, CUP$1, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

