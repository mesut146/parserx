package mesut.parserx.parser;

import java.io.*;
import java.util.*;

public class Lexer {

    static String cMapPacked = "\152\152\2\146\146\1\156\156\5\162\162\13\172\172\26\176\176\36\142\142\14\72\72\35\76\76\40\136\136\41\52\52\37\56\56\44\42\42\43\12\12\104\46\46\67\166\170\31\16\37\75\57\57\51\147\147\4\137\137\0"+
            "\43\43\57\47\47\47\53\53\50\73\73\45\133\133\46\77\77\54\143\143\3\153\153\12\157\157\20\163\163\21\173\173\71\13\14\76\74\74\52\150\150\11\144\144\7\100\100\64\134\134\103\140\140\65\164\164\24\174\174\73"+
            "\40\40\56\44\44\66\50\50\61\54\54\63\154\154\17\160\160\23\0\10\74\60\71\32\u03b6\uffff\77\177\u03b4\100\135\134\33\75\75\53\11\11\34\15\15\101\41\41\55\51\51\60\45\45\70\55\55\62\145\145\6\151\151\10"+
            "\141\141\15\135\135\102\155\155\16\165\165\25\171\171\27\u03b5\u03b5\42\175\175\72\161\161\22\101\132\30";
    //input -> input id
    static int[] cMap = unpackCMap(cMapPacked);
    //input id -> regex string for error reporting
    static String[] cMapRegex = {"_", "f", "j", "c", "g", "n", "e", "d", "i", "h", "k", "r", "b", "a", "m", "l", "o", "s", "q", "p", "t", "u", "z", "y", "A-Z", "v-x", "0-9", "]-\\", "\\t", ":", "~", "*", ">", "^", "\\u03b5", "\"", ".", ";", "[", "'", "+", "/", "<", "=", "?", "!", "\\u0020", "#", ")", "(", "-", ",", "@", "`", "$", "&", "%", "{", "}", "|", "\\u0000-\\b", "\\u000e-\\u001f", "\\u000b-\\f", "\\u03b6-\\uffff", "\\u007f-\\u03b4", "\\r", "]", "\\\\", "\\n"};
    int[] skip = {0,56};
    int[] accepting = {-269893634,-262895105,37683335,1555551};
    //state -> mode_state
    //int[] push_modes = {$push_modes$};
    //id -> token name
    String[] names = {"EOF","BOOLEAN","OPTIONS","TOKEN","INCLUDE","SKIP","START","EPSILON","LEFT","RIGHT","JOIN","IDENT","CALL_BEGIN","SHORTCUT","BRACKET","STRING","CHAR","NUMBER","LP","RP",
            "LBRACE","RBRACE","STAR","PLUS","QUES","POW","SEPARATOR","TILDE","HASH","COMMA","OR","DOT","SEMI","MINUS","ARROW","LINE_COMMENT","BLOCK_COMMENT","WS"};
    //state->token id
    int[] ids = {0,11,11,11,11,11,11,17,37,26,27,22,25,7,0,31,32,0,0,23,0,
            0,24,28,19,18,33,29,0,20,21,30,0,12,11,11,11,11,11,11,0,
            0,0,15,0,0,0,14,0,0,16,0,35,0,34,0,0,0,0,0,11,
            11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,
            11,11,5,1,11,0,0,0,36,0,0,0,0,0,0,0,11,11,3,13,
            0,10,0,0,0,8,11,11,6,0,0,9,4,2,0,0};
    static final int INITIAL = 0;
    static final int EOF = 0;
    Reader reader;
    int yypos = 0;//pos in file
    int yyline = 1;
    int yychar;
    public static int bufSize = 100;
    int bufPos = 0;//pos in buffer
    int bufStart = bufPos;
    char[] yybuf = new char[bufSize];
    static String trans_packed = "\105" +
            "\66\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7\1\10\3\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\4\21\5\22\1\23\1\24\6\25\1\26\1\27\1\30\1\31\1\32\7\34\10\35\11\36\12\37\13\41\14\42\15\43\16\44\17\45\20\46\21\47\22\50\23\51\24\53\11\54\26\56\10\57\27\60\30\61\31\62\32\63\33\70\34\71\35\72\36\73\37\101\10\104\10" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\42\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\43\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\44\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\45\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\46\14\1\15\1\16\1\17\1\20\47\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\1\32\7" +
            "\4\101\10\104\10\34\10\56\10" +
            "\2\53\11\35\0" +
            "\0" +
            "\0" +
            "\0" +
            "\0" +
            "\102\0\52\1\52\2\52\3\52\4\52\5\52\6\52\7\52\10\52\11\52\12\52\13\52\14\52\15\52\16\52\17\52\20\52\21\52\22\52\23\52\24\52\25\52\26\52\27\52\30\52\31\52\32\52\34\52\35\52\36\52\37\52\40\52\41\52\42\52\43\53\44\52\45\52\46\52\47\52\50\52\51\52\52\52\53\52\54\52\55\52\56\52\57\52\60\52\61\52\62\52\63\52\64\52\65\52\66\52\67\52\70\52\71\52\72\52\73\52\74\52\75\52\76\52\77\52\100\52\102\52\103\54" +
            "\0" +
            "\0" +
            "\103\0\55\1\55\2\55\3\55\4\55\5\55\6\55\7\55\10\55\11\55\12\55\13\55\14\55\15\55\16\55\17\55\20\55\21\55\22\55\23\55\24\55\25\55\26\55\27\55\30\55\31\55\32\55\33\55\34\55\35\56\36\55\37\55\40\55\41\55\42\55\43\55\44\55\45\55\46\55\47\55\50\55\51\55\52\55\53\55\54\55\55\55\56\55\57\55\60\55\61\55\62\55\63\55\64\55\65\55\66\55\67\55\70\55\71\55\72\55\73\55\74\55\75\55\76\55\77\55\100\55\102\57\103\60" +
            "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\61\45\61\46\61\47\62\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
            "\0" +
            "\2\51\64\37\65" +
            "\0" +
            "\0" +
            "\0" +
            "\0" +
            "\0" +
            "\1\40\66" +
            "\0" +
            "\5\21\67\2\70\6\71\13\72\17\73" +
            "\0" +
            "\0" +
            "\0" +
            "\0" +
            "\0" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\74\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\75\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\76\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\77\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\100\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\101\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\0" +
            "\0" +
            "\102\0\52\1\52\2\52\3\52\4\52\5\52\6\52\7\52\10\52\11\52\12\52\13\52\14\52\15\52\16\52\17\52\20\52\21\52\22\52\23\52\24\52\25\52\26\52\27\52\30\52\31\52\32\52\34\52\35\52\36\52\37\52\40\52\41\52\42\52\43\53\44\52\45\52\46\52\47\52\50\52\51\52\52\52\53\52\54\52\55\52\56\52\57\52\60\52\61\52\62\52\63\52\64\52\65\52\66\52\67\52\70\52\71\52\72\52\73\52\74\52\75\52\76\52\77\52\100\52\102\52\103\54" +
            "\0" +
            "\103\0\103\1\103\2\103\3\103\4\103\5\103\6\103\7\103\10\103\11\103\12\103\13\103\14\103\15\103\16\103\17\103\20\103\21\103\22\103\23\103\24\103\25\103\26\103\27\103\30\103\31\103\32\103\34\103\35\103\36\103\37\103\40\103\41\103\42\103\43\103\44\103\45\103\46\103\47\103\50\103\51\103\52\103\53\103\54\103\55\103\56\103\57\103\60\103\61\103\62\103\63\103\64\103\65\103\66\103\67\103\70\103\71\103\72\103\73\103\74\103\75\103\76\103\77\103\100\103\101\103\102\103\103\103" +
            "\103\0\55\1\55\2\55\3\55\4\55\5\55\6\55\7\55\10\55\11\55\12\55\13\55\14\55\15\55\16\55\17\55\20\55\21\55\22\55\23\55\24\55\25\55\26\55\27\55\30\55\31\55\32\55\33\55\34\55\35\55\36\55\37\55\40\55\41\55\42\55\43\55\44\55\45\55\46\55\47\55\50\55\51\55\52\55\53\55\54\55\55\55\56\55\57\55\60\55\61\55\62\55\63\55\64\55\65\55\66\55\67\55\70\55\71\55\72\55\73\55\74\55\75\55\76\55\77\55\100\55\102\57\103\60" +
            "\103\0\104\1\104\2\104\3\104\4\104\5\104\6\104\7\104\10\104\11\104\12\104\13\104\14\104\15\104\16\104\17\104\20\104\21\104\22\104\23\104\24\104\25\104\26\104\27\104\30\104\31\104\32\55\33\55\34\55\35\55\36\55\37\55\40\55\41\55\42\55\43\55\44\55\45\55\46\55\47\55\50\55\51\55\52\55\53\55\54\55\55\55\56\55\57\55\60\55\61\55\62\55\63\55\64\55\65\55\66\55\67\55\70\55\71\55\72\55\73\55\74\55\75\55\76\55\77\55\100\55\102\57\103\60" +
            "\0" +
            "\103\0\105\1\105\2\105\3\105\4\105\5\105\6\105\7\105\10\105\11\105\12\105\13\105\14\105\15\105\16\105\17\105\20\105\21\105\22\105\23\105\24\105\25\105\26\105\27\105\30\105\31\105\32\105\34\105\35\105\36\105\37\105\40\105\41\105\42\105\43\105\44\105\45\105\46\105\47\105\50\105\51\105\52\105\53\105\54\105\55\105\56\105\57\105\60\105\61\105\62\105\63\105\64\105\65\105\66\105\67\105\70\105\71\105\72\105\73\105\74\105\75\105\76\105\77\105\100\105\101\105\102\105\103\105" +
            "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\61\45\61\46\61\47\62\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
            "\0" +
            "\103\0\106\1\106\2\106\3\106\4\106\5\106\6\106\7\106\10\106\11\106\12\106\13\106\14\106\15\106\16\106\17\106\20\106\21\106\22\106\23\106\24\106\25\106\26\106\27\106\30\106\31\106\32\106\34\106\35\106\36\106\37\106\40\106\41\106\42\106\43\106\44\106\45\106\46\106\47\106\50\106\51\106\52\106\53\106\54\106\55\106\56\106\57\106\60\106\61\106\62\106\63\106\64\106\65\106\66\106\67\106\70\106\71\106\72\106\73\106\74\106\75\106\76\106\77\106\100\106\101\106\102\106\103\106" +
            "\103\0\64\1\64\2\64\3\64\4\64\5\64\6\64\7\64\10\64\11\64\12\64\13\64\14\64\15\64\16\64\17\64\20\64\21\64\22\64\23\64\24\64\25\64\26\64\27\64\30\64\31\64\32\64\34\64\35\64\36\64\37\64\40\64\41\64\42\64\43\64\44\64\45\64\46\64\47\64\50\64\51\64\52\64\53\64\54\64\55\64\56\64\57\64\60\64\61\64\62\64\63\64\64\64\65\64\66\64\67\64\70\64\71\64\72\64\73\64\74\64\75\64\76\64\77\64\100\64\101\64\102\64\103\64" +
            "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
            "\0" +
            "\1\24\112" +
            "\1\20\113" +
            "\2\23\114\16\115" +
            "\1\10\116" +
            "\1\6\117" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\120\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\121\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\122\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\123\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\124\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\125\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\0" +
            "\102\0\52\1\52\2\52\3\52\4\52\5\52\6\52\7\52\10\52\11\52\12\52\13\52\14\52\15\52\16\52\17\52\20\52\21\52\22\52\23\52\24\52\25\52\26\52\27\52\30\52\31\52\32\52\34\52\35\52\36\52\37\52\40\52\41\52\42\52\43\53\44\52\45\52\46\52\47\52\50\52\51\52\52\52\53\52\54\52\55\52\56\52\57\52\60\52\61\52\62\52\63\52\64\52\65\52\66\52\67\52\70\52\71\52\72\52\73\52\74\52\75\52\76\52\77\52\100\52\102\52\103\54" +
            "\103\0\126\1\126\2\126\3\126\4\126\5\126\6\126\7\126\10\126\11\126\12\126\13\126\14\126\15\126\16\126\17\126\20\126\21\126\22\126\23\126\24\126\25\126\26\126\27\126\30\126\31\126\32\126\33\55\34\55\35\127\36\55\37\55\40\55\41\55\42\55\43\55\44\55\45\55\46\55\47\55\50\55\51\55\52\55\53\55\54\55\55\55\56\55\57\55\60\55\61\55\62\55\63\55\64\55\65\55\66\55\67\55\70\55\71\55\72\55\73\55\74\55\75\55\76\55\77\55\100\55\102\57\103\60" +
            "\103\0\55\1\55\2\55\3\55\4\55\5\55\6\55\7\55\10\55\11\55\12\55\13\55\14\55\15\55\16\55\17\55\20\55\21\55\22\55\23\55\24\55\25\55\26\55\27\55\30\55\31\55\32\55\33\55\34\55\35\55\36\55\37\55\40\55\41\55\42\55\43\55\44\55\45\55\46\55\47\55\50\55\51\55\52\55\53\55\54\55\55\55\56\55\57\55\60\55\61\55\62\55\63\55\64\55\65\55\66\55\67\55\70\55\71\55\72\55\73\55\74\55\75\55\76\55\77\55\100\55\102\57\103\60" +
            "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\61\45\61\46\61\47\62\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
            "\0" +
            "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
            "\104\0\130\1\130\2\130\3\130\4\130\5\130\6\130\7\130\10\130\11\130\12\130\13\130\14\130\15\130\16\130\17\130\20\130\21\130\22\130\23\130\24\130\25\130\26\130\27\130\30\130\31\130\32\130\34\130\35\130\36\130\37\130\40\130\41\130\42\130\43\130\44\130\45\130\46\130\47\130\50\130\51\131\52\130\53\130\54\130\55\130\56\130\57\130\60\130\61\130\62\130\63\130\64\130\65\130\66\130\67\130\70\130\71\130\72\130\73\130\74\130\75\130\76\130\77\130\100\130\101\130\102\130\103\130\104\130" +
            "\1\15\132" +
            "\1\10\133" +
            "\1\21\134" +
            "\1\23\135" +
            "\1\4\136" +
            "\1\1\137" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\124\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\141\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\142\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\143\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\103\0\126\1\126\2\126\3\126\4\126\5\126\6\126\7\126\10\126\11\126\12\126\13\126\14\126\15\126\16\126\17\126\20\126\21\126\22\126\23\126\24\126\25\126\26\126\27\126\30\126\31\126\32\126\33\55\34\55\35\127\36\55\37\55\40\55\41\55\42\55\43\55\44\55\45\55\46\55\47\55\50\55\51\55\52\55\53\55\54\55\55\55\56\55\57\55\60\55\61\55\62\55\63\55\64\55\65\55\66\55\67\55\70\55\71\55\72\55\73\55\74\55\75\55\76\55\77\55\100\55\102\57\103\60" +
            "\103\0\55\1\55\2\55\3\55\4\55\5\55\6\55\7\55\10\55\11\55\12\55\13\55\14\55\15\55\16\55\17\55\20\55\21\55\22\55\23\55\24\55\25\55\26\55\27\55\30\55\31\55\32\55\33\55\34\55\35\55\36\55\37\55\40\55\41\55\42\55\43\55\44\55\45\55\46\55\47\55\50\55\51\55\52\55\53\55\54\55\55\55\56\55\57\55\60\55\61\55\62\55\63\55\64\55\65\55\66\55\67\55\70\55\71\55\72\55\73\55\74\55\75\55\76\55\77\55\100\55\102\144\103\60" +
            "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
            "\0" +
            "\1\13\145" +
            "\1\5\146" +
            "\1\10\147" +
            "\1\24\150" +
            "\1\11\151" +
            "\1\24\152" +
            "\0" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\153\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\154\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\0" +
            "\1\24\155" +
            "\0" +
            "\1\17\156" +
            "\1\27\15" +
            "\1\24\160" +
            "\0" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\161\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\162\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\0" +
            "\1\20\163" +
            "\0" +
            "\0" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\61\41" +
            "\1\5\15" +
            "\0";
    static int[][] trans = unpackTrans(trans_packed);
    int curState = INITIAL;

    public Lexer(Reader reader) throws IOException{
        this.reader = reader;
        init();
    }

    public Lexer(File file) throws IOException {
        this.reader = new BufferedReader(new FileReader(file));
        init();
    }

    static boolean getBit(int[] arr, int state) {
        return ((arr[state / 32] >> (state % 32)) & 1) != 0;
    }

    static int[][] unpackTrans(String str) {
        int pos = 0;
        int max = str.charAt(pos++);
        List<int[]> list = new ArrayList<>();
        while (pos < str.length()) {
            int[] arr = new int[max];
            Arrays.fill(arr, -1);
            int trCount = str.charAt(pos++);
            for (int input = 0; input < trCount; input++) {
                //input -> target state
                arr[str.charAt(pos++)] = str.charAt(pos++);
            }
            list.add(arr);
        }
        return list.toArray(new int[0][]);
    }

    static int[] unpackCMap(String str){
        int pos = 0;
        int[] arr = new int[0x010FFFF];//covers all code points
        Arrays.fill(arr, -1);//unused chars leads error
        while(pos < str.length()){
            int left = str.charAt(pos++);
            int right = str.charAt(pos++);
            int id = str.charAt(pos++);
            for(int i = left;i <= right;i++){
                arr[i] = id;
            }
        }
        return arr;
    }

    void init() throws IOException{
        reader.read(yybuf, 0, bufSize);
    }

    void fill() throws IOException{
        if(bufPos == yybuf.length){
            char[] newBuf = new char[yybuf.length * 2];
            System.arraycopy(yybuf, 0, newBuf, 0, yybuf.length);
            reader.read(newBuf, bufPos, yybuf.length);
            yybuf = newBuf;
        }
    }

    String getText(){
        return new String(yybuf, bufStart, bufPos - bufStart);
    }

    String findExpected(int from){
        StringBuilder sb = new StringBuilder();
        for(int i = 0 ; i < trans[from].length;i++){
            sb.append(cMapRegex[i]);
            sb.append(",");
        }
        return sb.toString();
    }

    Token getEOF(){
        Token res =  new Token(EOF, "");
        res.name = "EOF";
        res.line = yyline;
        return res;
    }

    public Token next() throws IOException {
        Token tok = next_normal();
        if(getBit(skip, tok.type)){
            return next();
        }
        return tok;
    }

    public Token next_normal() throws IOException {
        fill();
        curState = INITIAL;
        int lastState = -1;
        int startPos = yypos;
        int startLine = yyline;
        yychar = yybuf[bufPos];
        if (yychar == EOF) return getEOF();
        int backupState = -1;
        while (true) {
            fill();
            yychar = yybuf[bufPos];
            if(yychar == EOF){
                curState = -1;
            }else{
                backupState = curState;
                if(cMap[yychar] == -1){
                    throw new IOException(String.format("unknown input=%c(%d) pos=%s line=%d",yychar, yychar, yypos, yyline));
                }
                curState = trans[curState][cMap[yychar]];
            }
            if (curState == -1) {
                if (lastState != -1) {
                    Token token = new Token(ids[lastState], getText());
                    token.offset = startPos;
                    token.name = names[ids[lastState]];
                    token.line = startLine;
                    bufStart = bufPos;
                    /*if(!after[ids[lastState]]){
                      curState = INITIAL;
                    }*/
                    return token;
                }
                else {
                    throw new IOException(String.format("invalid input=%c(%d) pos=%s line=%d buf='%s' expecting=%s",yychar,yychar,yypos,yyline,getText(),findExpected(backupState)));
                }
            }
            else {
                if (getBit(accepting, curState)) lastState = curState;
                if(yychar == '\n'){
                    yyline++;
                    if(bufPos > 0 && yybuf[bufPos - 1] == '\r'){
                        yyline--;
                    }
                }
                else if(yychar == '\r'){
                    yyline++;
                }
                bufPos++;
                yypos++;
            }
        }
    }
}
