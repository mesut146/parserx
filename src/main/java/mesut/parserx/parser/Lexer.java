package mesut.parserx.parser;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Lexer {

    static final int INITIAL = 0;
    static final int EOF = 0;
    public static int bufSize = 10000;
    static String cMapPacked = "\u0062\u0062\u000b\u006e\u006e\u0004\u0066\u0066\u0001\u0072\u0072\u0002\u007e\u007e\u0029\u003e\u003e\u0019\u003a\u003a\u001b\u002e\u002e\u001e\"\"\u0021\u002a\u002a\u0028\n\n\u0027\u005e\u005e\u001a\u006a\u006a\u0014\u0026\u0027\u003d\u0076\u007a\u0017\u000e\u001f\u003b\u005b\u005b\u001d\u006b\u006b\b\u0063\u0063\u0003\u005f\u005f\u0000" +
            "\u003b\u003b\u001f\u002f\u002f\"\u002b\u002b\u002c\u0023\u0023\u002b\u003f\u003f\u0020\u0073\u0073\u0005\u007b\u007b\u0037\u006f\u006f\t\u0067\u0067\r\u000b\f\u003c\u0060\u0060\u0026\u0068\u0068\u0013\u0064\u0064\u0007\u0074\u0074\n\u007c\u007c\u0039\\\\\u001c\u0040\u0040\u0025\u003c\u003c\u0023\u002c\u002c\u0034\u0020\u0020\u0030" +
            "\u0024\u0024\u0035\u0028\u0028\u0032\u006c\u006c\u000f\u0070\u0070\u0011\u0000\b\u003a\u0030\u0039\u0018\u03b6\uffff\u003e\u007f\u03b4\u003f\u003d\u003d\u0024\t\t\u002a\r\r\u002e\u0021\u0021\u002f\u0025\u0025\u0036\u0029\u0029\u0031\u002d\u002d\u0033\u0075\u0075\u0012\u03b5\u03b5\u002d\u007d\u007d\u0038\u0071\u0071\u0010\u0065\u0065\u0006" +
            "\u0061\u0061\f\u005d\u005d\u0040\u0069\u0069\u0015\u006d\u006d\u000e\u0041\u005a\u0016";
    static int[] cMap = unpackCMap(cMapPacked);
    static String trans_packed =
            "\63\0\1\1\2\2\1\3\1\4\1\5\3\6\1\7\1\10\1\11\4\12\5\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\6\26\1\27\1\30\7\32\10\33\11\35\12\36\13\37\14\40\15\41\16\42\17\44\20\47\21\50\22\51\23\52\21\53\24\54\25\55\26\56\21\60\21\61\27\62\30\63\31\64\32\66\33\67\34\70\35\71\36" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\40\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\41\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\42\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\43\3\37\4\37\5\37\6\37\7\37\10\37\11\44\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\45\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\1\30\7" +
                    "\0" +
                    "\2\44\46\33\47" +
                    "\101\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\51\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\52" +
                    "\0" +
                    "\0" +
                    "\0" +
                    "\77\0\53\1\53\2\53\3\53\4\53\5\53\6\53\7\53\10\53\11\53\12\53\13\53\14\53\15\53\16\53\17\53\20\53\21\53\22\53\23\53\24\53\25\53\26\53\27\53\30\53\31\53\32\53\33\53\34\54\35\53\36\53\37\53\40\53\41\55\42\53\43\53\44\53\45\53\46\53\50\53\51\53\52\53\53\53\54\53\55\53\57\53\60\53\61\53\62\53\63\53\64\53\65\53\66\53\67\53\70\53\71\53\72\53\73\53\74\53\75\53\76\53\77\53\100\53" +
                    "\2\42\56\50\57" +
                    "\0" +
                    "\4\60\21\47\21\52\21\56\21" +
                    "\0" +
                    "\0" +
                    "\0" +
                    "\0" +
                    "\0" +
                    "\0" +
                    "\0" +
                    "\1\31\60" +
                    "\0" +
                    "\4\2\61\5\62\6\63\17\64" +
                    "\0" +
                    "\0" +
                    "\0" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\65\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\66\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\67\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\70\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\71\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\72\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\0" +
                    "\1\44\73" +
                    "\101\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\52" +
                    "\101\0\74\1\74\2\74\3\74\4\74\5\74\6\74\7\74\10\74\11\74\12\74\13\74\14\74\15\74\16\74\17\74\20\74\21\74\22\74\23\74\24\74\25\74\26\74\27\74\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\52" +
                    "\0" +
                    "\77\0\53\1\53\2\53\3\53\4\53\5\53\6\53\7\53\10\53\11\53\12\53\13\53\14\53\15\53\16\53\17\53\20\53\21\53\22\53\23\53\24\53\25\53\26\53\27\53\30\53\31\53\32\53\33\53\34\54\35\53\36\53\37\53\40\53\41\55\42\53\43\53\44\53\45\53\46\53\50\53\51\53\52\53\53\53\54\53\55\53\57\53\60\53\61\53\62\53\63\53\64\53\65\53\66\53\67\53\70\53\71\53\72\53\73\53\74\53\75\53\76\53\77\53\100\53" +
                    "\100\0\75\1\75\2\75\3\75\4\75\5\75\6\75\7\75\10\75\11\75\12\75\13\75\14\75\15\75\16\75\17\75\20\75\21\75\22\75\23\75\24\75\25\75\26\75\27\75\30\75\31\75\32\75\33\75\34\75\35\75\36\75\37\75\40\75\41\75\42\75\43\75\44\75\45\75\46\75\50\75\51\75\52\75\53\75\54\75\55\75\56\75\57\75\60\75\61\75\62\75\63\75\64\75\65\75\66\75\67\75\70\75\71\75\72\75\73\75\74\75\75\75\76\75\77\75\100\75" +
                    "\0" +
                    "\100\0\76\1\76\2\76\3\76\4\76\5\76\6\76\7\76\10\76\11\76\12\76\13\76\14\76\15\76\16\76\17\76\20\76\21\76\22\76\23\76\24\76\25\76\26\76\27\76\30\76\31\76\32\76\33\76\34\76\35\76\36\76\37\76\40\76\41\76\42\76\43\76\44\76\45\76\46\76\50\76\51\76\52\76\53\76\54\76\55\76\56\76\57\76\60\76\61\76\62\76\63\76\64\76\65\76\66\76\67\76\70\76\71\76\72\76\73\76\74\76\75\76\76\76\77\76\100\76" +
                    "\101\0\77\1\77\2\77\3\77\4\77\5\77\6\77\7\77\10\77\11\77\12\77\13\77\14\77\15\77\16\77\17\77\20\77\21\77\22\77\23\77\24\77\25\77\26\77\27\77\30\77\31\77\32\77\33\77\34\77\35\77\36\77\37\77\40\77\41\77\42\77\43\77\44\77\45\77\46\77\47\77\50\100\51\77\52\77\53\77\54\77\55\77\56\77\57\77\60\77\61\77\62\77\63\77\64\77\65\77\66\77\67\77\70\77\71\77\72\77\73\77\74\77\75\77\76\77\77\77\100\77" +
                    "\0" +
                    "\1\25\101" +
                    "\1\12\102" +
                    "\1\21\103" +
                    "\1\6\104" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\105\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\106\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\107\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\110\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\111\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\112\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\0" +
                    "\101\0\113\1\113\2\113\3\113\4\113\5\113\6\113\7\113\10\113\11\113\12\113\13\113\14\113\15\113\16\113\17\113\20\113\21\113\22\113\23\113\24\113\25\113\26\113\27\113\30\113\31\50\32\50\33\114\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\52" +
                    "\77\0\53\1\53\2\53\3\53\4\53\5\53\6\53\7\53\10\53\11\53\12\53\13\53\14\53\15\53\16\53\17\53\20\53\21\53\22\53\23\53\24\53\25\53\26\53\27\53\30\53\31\53\32\53\33\53\34\54\35\53\36\53\37\53\40\53\41\55\42\53\43\53\44\53\45\53\46\53\50\53\51\53\52\53\53\53\54\53\55\53\57\53\60\53\61\53\62\53\63\53\64\53\65\53\66\53\67\53\70\53\71\53\72\53\73\53\74\53\75\53\76\53\77\53\100\53" +
                    "\100\0\76\1\76\2\76\3\76\4\76\5\76\6\76\7\76\10\76\11\76\12\76\13\76\14\76\15\76\16\76\17\76\20\76\21\76\22\76\23\76\24\76\25\76\26\76\27\76\30\76\31\76\32\76\33\76\34\76\35\76\36\76\37\76\40\76\41\76\42\76\43\76\44\76\45\76\46\76\50\76\51\76\52\76\53\76\54\76\55\76\56\76\57\76\60\76\61\76\62\76\63\76\64\76\65\76\66\76\67\76\70\76\71\76\72\76\73\76\74\76\75\76\76\76\77\76\100\76" +
                    "\101\0\77\1\77\2\77\3\77\4\77\5\77\6\77\7\77\10\77\11\77\12\77\13\77\14\77\15\77\16\77\17\77\20\77\21\77\22\77\23\77\24\77\25\77\26\77\27\77\30\77\31\77\32\77\33\77\34\77\35\77\36\77\37\77\40\77\41\77\42\77\43\77\44\77\45\77\46\77\47\77\50\100\51\77\52\77\53\77\54\77\55\77\56\77\57\77\60\77\61\77\62\77\63\77\64\77\65\77\66\77\67\77\70\77\71\77\72\77\73\77\74\77\75\77\76\77\77\77\100\77" +
                    "\101\0\115\1\115\2\115\3\115\4\115\5\115\6\115\7\115\10\115\11\115\12\115\13\115\14\115\15\115\16\115\17\115\20\115\21\115\22\115\23\115\24\115\25\115\26\115\27\115\30\115\31\115\32\115\33\115\34\115\35\115\36\115\37\115\40\115\41\115\42\116\43\115\44\115\45\115\46\115\47\115\50\115\51\115\52\115\53\115\54\115\55\115\56\115\57\115\60\115\61\115\62\115\63\115\64\115\65\115\66\115\67\115\70\115\71\115\72\115\73\115\74\115\75\115\76\115\77\115\100\115" +
                    "\1\15\117" +
                    "\1\14\120" +
                    "\1\5\121" +
                    "\1\1\122" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\123\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\124\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\125\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\126\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\101\0\113\1\113\2\113\3\113\4\113\5\113\6\113\7\113\10\113\11\113\12\113\13\113\14\113\15\113\16\113\17\113\20\113\21\113\22\113\23\113\24\113\25\113\26\113\27\113\30\113\31\50\32\50\33\114\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\52" +
                    "\101\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\127" +
                    "\101\0\77\1\77\2\77\3\77\4\77\5\77\6\77\7\77\10\77\11\77\12\77\13\77\14\77\15\77\16\77\17\77\20\77\21\77\22\77\23\77\24\77\25\77\26\77\27\77\30\77\31\77\32\77\33\77\34\77\35\77\36\77\37\77\40\77\41\77\42\77\43\77\44\77\45\77\46\77\47\77\50\100\51\77\52\77\53\77\54\77\55\77\56\77\57\77\60\77\61\77\62\77\63\77\64\77\65\77\66\77\67\77\70\77\71\77\72\77\73\77\74\77\75\77\76\77\77\77\100\77" +
                    "\0" +
                    "\1\23\130" +
                    "\1\2\131" +
                    "\1\25\132" +
                    "\1\12\133" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\134\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\135\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\136\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\0" +
                    "\1\12\137" +
                    "\1\12\140" +
                    "\1\17\141" +
                    "\0" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\142\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\143\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\0" +
                    "\0" +
                    "\1\11\144" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\31\0\37\1\37\2\37\3\37\4\37\5\37\6\37\7\37\10\37\11\37\12\37\13\37\14\37\15\37\16\37\17\37\20\37\21\37\22\37\23\37\24\37\25\37\26\37\27\37\30\37" +
                    "\1\4\145" +
                    "\0";
    static int[][] trans = unpackTrans(trans_packed, 65);
    int[] skip = {131072, 1073758208, 16384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int[] accepting = {-167822338, 1340171391, -117946400, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    //id -> token name
    String[] names = {"EOF", "BOOLEAN", "OPTIONS", "TOKEN", "SKIP", "INCLUDE", "START", "EPSILON", "LEFT", "RIGHT", "IDENT", "SHORTCUT", "BRACKET", "STRING", "NUMBER", "LP", "RP", "LBRACE", "RBRACE", "STAR",
            "PLUS", "QUES", "POW", "SEPARATOR", "TILDE", "HASH", "COMMA", "OR", "DOT", "SEMI"};
    //state->token id
    int[] ids = {0, 10, 10, 10, 10, 10, 10, 14, 22, 23, 0, 28, 29, 21, 0, 0, 23, 0, 19, 24, 25,
            20, 7, 16, 15, 0, 26, 0, 17, 18, 27, 10, 10, 10, 10, 10, 10, 10, 23, 0, 0,
            0, 12, 0, 0, 13, 0, 0, 23, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 23, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 10, 4, 10, 1, 10, 10, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 10, 3, 10, 11, 0, 0, 0, 8, 10, 3, 10, 9, 6, 0, 2, 5, 0,
            7};
    Reader reader;
    int yypos = 0;//pos in file
    int yyline = 1;
    int yychar;
    int bufPos = bufSize;//pos in buffer
    int bufStart = bufSize;
    int bufEnd;
    char[] yybuf = new char[bufSize];

    public Lexer(Reader reader) {
        this.reader = reader;
    }

    public Lexer(File file) throws FileNotFoundException {
        this.reader = new BufferedReader(new FileReader(file));
    }

    static boolean getBit(int[] arr, int state) {
        return ((arr[state / 32] >> (state % 32)) & 1) != 0;
    }

    static int[][] unpackTrans(String str, int max) {
        int pos = 0;
        List<int[]> list = new ArrayList<>();
        while (pos < str.length()) {
            int size = str.charAt(pos++);
            int[] arr = new int[max];
            Arrays.fill(arr, -1);
            for (int input = 0; input < size; input++) {
                //input -> target state
                arr[str.charAt(pos++)] = str.charAt(pos++);
            }
            list.add(arr);
        }
        return list.toArray(new int[0][]);
    }

    static int[] unpackCMap(String str) {
        int pos = 0;
        int[] arr = new int[0x010FFFF];//covers all code points
        Arrays.fill(arr, -1);//unused chars leads error
        while (pos < str.length()) {
            int left = str.charAt(pos++);
            int right = str.charAt(pos++);
            int id = str.charAt(pos++);
            for (int i = left; i <= right; i++) {
                arr[i] = id;
            }
        }
        return arr;
    }

    void fill() throws IOException {
        if (bufPos == bufSize) {
            char[] newBuf = new char[bufSize];
            System.arraycopy(yybuf, bufStart, newBuf, 0, bufPos - bufStart);
            reader.read(newBuf, bufPos - bufStart, bufSize - bufPos + bufStart);
            yybuf = newBuf;
            bufPos = bufPos - bufStart;
            bufStart = 0;
        }
    }

    String getText() {
        return new String(yybuf, bufStart, bufPos - bufStart);
    }

    public Token next() throws IOException {
        fill();
        int curState = INITIAL;
        int lastState = -1;
        int startPos = yypos;
        int startLine = yyline;
        yychar = yybuf[bufPos];
        if (yychar == EOF) return new Token(EOF, "EOF");
        while (true) {
            yychar = yybuf[bufPos];
            if (yychar == EOF) {
                curState = -1;
            }
            else {
                curState = trans[curState][cMap[yychar]];
                if (yychar == '\n') {
                    yyline++;
                }
                else if (yychar == '\r') {
                    if (yybuf[bufPos + 1] == '\n') {
                        //todo \n may have transition?
                        yyline++;
                        //bufPos++;
                        //yypos++;
                    }
                    else {
                        yyline++;
                    }
                }
            }
            if (curState == -1) {
                if (lastState != -1) {
                    if (!getBit(skip, lastState)) {
                        Token token = new Token(ids[lastState], getText());
                        token.offset = startPos;
                        token.name = names[ids[lastState]];
                        token.line = startLine;
                        bufStart = bufPos;
                        return token;
                    }
                    bufStart = bufPos;
                    if (yychar == EOF) return new Token(EOF, "EOF");
                    if (getBit(skip, lastState)) return next();
                }
                else {
                    throw new IOException("invalid input=" + (char) yychar + "(" + yychar + ") " + " yybuf= " + getText());
                }
            }
            else {
                bufPos++;
                yypos++;
                if (getBit(accepting, curState)) lastState = curState;
            }
        }
    }
}
