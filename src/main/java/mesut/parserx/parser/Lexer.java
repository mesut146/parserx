package mesut.parserx.parser;

import java.io.*;
import java.util.*;

public class Lexer {

    static String cMapPacked = "\142\142\14\156\156\1\146\146\2\162\162\3\172\172\26\176\176\53\76\76\37\136\136\40\72\72\35\52\52\36\56\56\42\42\42\41\12\12\104\46\46\70\152\152\24\166\170\31\16\37\75\57\57\47\153\153\4\137\137\0"+
            "\43\43\56\47\47\45\53\53\46\73\73\43\133\133\44\77\77\52\157\157\5\163\163\6\173\173\65\143\143\7\147\147\10\13\14\76\150\150\20\160\160\12\164\164\13\174\174\73\74\74\50\50\50\60\54\54\62\40\40\55"+
            "\44\44\67\144\144\17\100\100\63\134\134\103\140\140\64\154\154\22\0\10\74\60\71\32\u03b6\uffff\77\177\u03b4\100\135\134\33\75\75\51\11\11\34\15\15\101\41\41\54\51\51\57\45\45\71\55\55\61\155\155\21\165\165\23"+
            "\171\171\27\u03b5\u03b5\66\175\175\72\151\151\25\161\161\11\141\141\15\135\135\102\145\145\16\101\132\30";
    //input -> input id
    static int[] cMap = unpackCMap(cMapPacked);
    //input id -> regex string for error reporting
    static String[] cMapRegex = {"_", "n", "f", "r", "k", "o", "s", "c", "g", "q", "p", "t", "b", "a", "e", "d", "h", "m", "l", "u", "j", "i", "z", "y", "A-Z", "v-x", "0-9", "]-\\", "\\t", ":", "*", ">", "^", "\"", ".", ";", "[", "'", "+", "/", "<", "=", "?", "~", "!", "\\u0020", "#", ")", "(", "-", ",", "@", "`", "{", "Îµ", "$", "&", "%", "}", "|", "\\u0000-\\b", "\\u000e-\\u001f", "\\u000b-\\f", "\\u03b6-\\uffff", "\\u007f-\\u03b4", "\\r", "]", "\\\\", "\\n"};
    int[] skip = {-2147483648,3};
    int[] accepting = {-570789890,-64338689,-263725023,94147,0,0,0,0};
    //id -> token name
    String[] names = {"EOF","BOOLEAN","OPTIONS","TOKEN","SKIP","INCLUDE","START","EPSILON","LEFT","RIGHT","IDENT","SHORTCUT","BRACKET","STRING","CHAR","NUMBER","LP","RP","LBRACE","RBRACE",
"STAR","PLUS","QUES","POW","SEPARATOR","TILDE","HASH","COMMA","OR","DOT","SEMI","LINE_COMMENT","BLOCK_COMMENT","WS"};
    //state->token id
    int[] ids = {0,10,10,10,10,10,10,15,33,0,20,23,0,29,30,0,0,21,0,0,22,
            25,26,17,16,0,27,18,0,0,19,28,0,10,10,10,10,10,10,0,0,
            0,13,0,0,0,12,0,0,14,0,31,0,0,0,0,0,0,10,10,10,
            10,10,10,24,0,0,0,0,0,0,0,0,0,0,0,0,10,10,4,1,
            10,10,0,0,0,32,0,0,0,0,0,0,10,3,10,11,8,0,0,0,
            0,10,3,10,9,6,0,0,2,5,0,7};
    static final int INITIAL = 0;
    static final int EOF = 0;
    Reader reader;
    int yypos = 0;//pos in file
    int yyline = 1;
    int yychar;
    public static int bufSize = 100;
    int bufPos = 0;//pos in buffer
    int bufStart = bufPos;
    int bufEnd;
    char[] yybuf = new char[bufSize];
    static String trans_packed = "\105" +
        "\67\0\1\1\1\2\2\3\1\4\1\5\3\6\4\7\1\10\1\11\1\12\1\13\5\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\6\26\1\27\1\30\1\31\1\32\7\34\10\35\100\36\12\40\13\41\14\42\15\43\16\44\17\45\20\46\21\47\22\51\100\52\24\53\25\55\10\56\26\57\27\60\30\61\0\62\32\65\33\66\160\71\35\72\36\73\37\101\10\104\10\37\100" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\41\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\42\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\43\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\44\4\1\5\45\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\46\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\1\32\7" +
        "\4\101\10\104\10\34\10\55\10" +
        "\0" +
        "\0" +
        "\0" +
        "\102\0\51\1\51\2\51\3\51\4\51\5\51\6\51\7\51\10\51\11\51\12\51\13\51\14\51\15\51\16\51\17\51\20\51\21\51\22\51\23\51\24\51\25\51\26\51\27\51\30\51\31\51\32\51\34\51\35\51\36\51\37\51\40\51\41\52\42\51\43\51\44\51\45\51\46\51\47\51\50\51\51\51\52\51\53\51\54\51\55\51\56\51\57\51\60\51\61\51\62\51\63\51\64\51\65\51\66\51\67\51\70\51\71\51\72\51\73\51\74\51\75\51\76\51\77\51\100\51\102\51\103\53" +
        "\0" +
        "\0" +
        "\103\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\33\54\34\54\35\55\36\54\37\54\40\54\41\54\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\56\103\57" +
        "\102\0\60\1\60\2\60\3\60\4\60\5\60\6\60\7\60\10\60\11\60\12\60\13\60\14\60\15\60\16\60\17\60\20\60\21\60\22\60\23\60\24\60\25\60\26\60\27\60\30\60\31\60\32\60\34\60\35\60\36\60\37\60\40\60\41\60\42\60\43\60\44\60\45\61\46\60\47\60\50\60\51\60\52\60\53\60\54\60\55\60\56\60\57\60\60\60\61\60\62\60\63\60\64\60\65\60\66\60\67\60\70\60\71\60\72\60\73\60\74\60\75\60\76\60\77\60\100\60\102\60\103\62" +
        "\0" +
        "\2\47\63\36\64" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\4\22\66\3\67\6\70\16\71" +
        "\0" +
        "\0" +
        "\0" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\72\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\73\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\74\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\75\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\76\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\77\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\0" +
        "\0" +
        "\102\0\51\1\51\2\51\3\51\4\51\5\51\6\51\7\51\10\51\11\51\12\51\13\51\14\51\15\51\16\51\17\51\20\51\21\51\22\51\23\51\24\51\25\51\26\51\27\51\30\51\31\51\32\51\34\51\35\51\36\51\37\51\40\51\41\52\42\51\43\51\44\51\45\51\46\51\47\51\50\51\51\51\52\51\53\51\54\51\55\51\56\51\57\51\60\51\61\51\62\51\63\51\64\51\65\51\66\51\67\51\70\51\71\51\72\51\73\51\74\51\75\51\76\51\77\51\100\51\102\51\103\53" +
        "\0" +
        "\103\0\101\1\101\2\101\3\101\4\101\5\101\6\101\7\101\10\101\11\101\12\101\13\101\14\101\15\101\16\101\17\101\20\101\21\101\22\101\23\101\24\101\25\101\26\101\27\101\30\101\31\101\32\101\34\101\35\101\36\101\37\101\40\101\41\101\42\101\43\101\44\101\45\101\46\101\47\101\50\101\51\101\52\101\53\101\54\101\55\101\56\101\57\101\60\101\61\101\62\101\63\101\64\101\65\101\66\101\67\101\70\101\71\101\72\101\73\101\74\101\75\101\76\101\77\101\100\101\101\101\102\101\103\101" +
        "\103\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\33\54\34\54\35\54\36\54\37\54\40\54\41\54\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\56\103\57" +
        "\103\0\102\1\102\2\102\3\102\4\102\5\102\6\102\7\102\10\102\11\102\12\102\13\102\14\102\15\102\16\102\17\102\20\102\21\102\22\102\23\102\24\102\25\102\26\102\27\102\30\102\31\102\32\54\33\54\34\54\35\54\36\54\37\54\40\54\41\54\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\56\103\57" +
        "\0" +
        "\103\0\103\1\103\2\103\3\103\4\103\5\103\6\103\7\103\10\103\11\103\12\103\13\103\14\103\15\103\16\103\17\103\20\103\21\103\22\103\23\103\24\103\25\103\26\103\27\103\30\103\31\103\32\103\34\103\35\103\36\103\37\103\40\103\41\103\42\103\43\103\44\103\45\103\46\103\47\103\50\103\51\103\52\103\53\103\54\103\55\103\56\103\57\103\60\103\61\103\62\103\63\103\64\103\65\103\66\103\67\103\70\103\71\103\72\103\73\103\74\103\75\103\76\103\77\103\100\103\101\103\102\103\103\103" +
        "\102\0\60\1\60\2\60\3\60\4\60\5\60\6\60\7\60\10\60\11\60\12\60\13\60\14\60\15\60\16\60\17\60\20\60\21\60\22\60\23\60\24\60\25\60\26\60\27\60\30\60\31\60\32\60\34\60\35\60\36\60\37\60\40\60\41\60\42\60\43\60\44\60\45\61\46\60\47\60\50\60\51\60\52\60\53\60\54\60\55\60\56\60\57\60\60\60\61\60\62\60\63\60\64\60\65\60\66\60\67\60\70\60\71\60\72\60\73\60\74\60\75\60\76\60\77\60\100\60\102\60\103\62" +
        "\0" +
        "\103\0\104\1\104\2\104\3\104\4\104\5\104\6\104\7\104\10\104\11\104\12\104\13\104\14\104\15\104\16\104\17\104\20\104\21\104\22\104\23\104\24\104\25\104\26\104\27\104\30\104\31\104\32\104\34\104\35\104\36\104\37\104\40\104\41\104\42\104\43\104\44\104\45\104\46\104\47\104\50\104\51\104\52\104\53\104\54\104\55\104\56\104\57\104\60\104\61\104\62\104\63\104\64\104\65\104\66\104\67\104\70\104\71\104\72\104\73\104\74\104\75\104\76\104\77\104\100\104\101\104\102\104\103\104" +
        "\103\0\63\1\63\2\63\3\63\4\63\5\63\6\63\7\63\10\63\11\63\12\63\13\63\14\63\15\63\16\63\17\63\20\63\21\63\22\63\23\63\24\63\25\63\26\63\27\63\30\63\31\63\32\63\34\63\35\63\36\63\37\63\40\63\41\63\42\63\43\63\44\63\45\63\46\63\47\63\50\63\51\63\52\63\53\63\54\63\55\63\56\63\57\63\60\63\61\63\62\63\63\63\64\63\65\63\66\63\67\63\70\63\71\63\72\63\73\63\74\63\75\63\76\63\77\63\100\63\101\63\102\63\103\63" +
        "\104\0\106\1\106\2\106\3\106\4\106\5\106\6\106\7\106\10\106\11\106\12\106\13\106\14\106\15\106\16\106\17\106\20\106\21\106\22\106\23\106\24\106\25\106\26\106\27\106\30\106\31\106\32\106\34\106\35\106\36\107\37\106\40\106\41\106\42\106\43\106\44\106\45\106\46\106\47\106\50\106\51\106\52\106\53\106\54\106\55\106\56\106\57\106\60\106\61\106\62\106\63\106\64\106\65\106\66\106\67\106\70\106\71\106\72\106\73\106\74\106\75\106\76\106\77\106\100\106\101\106\102\106\103\106\104\106" +
        "\0" +
        "\1\16\110" +
        "\1\25\111" +
        "\1\13\112" +
        "\2\21\113\12\114" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\115\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\116\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\117\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\120\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\121\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\122\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\2\51\100\35\0" +
        "\102\0\51\1\51\2\51\3\51\4\51\5\51\6\51\7\51\10\51\11\51\12\51\13\51\14\51\15\51\16\51\17\51\20\51\21\51\22\51\23\51\24\51\25\51\26\51\27\51\30\51\31\51\32\51\34\51\35\51\36\51\37\51\40\51\41\52\42\51\43\51\44\51\45\51\46\51\47\51\50\51\51\51\52\51\53\51\54\51\55\51\56\51\57\51\60\51\61\51\62\51\63\51\64\51\65\51\66\51\67\51\70\51\71\51\72\51\73\51\74\51\75\51\76\51\77\51\100\51\102\51\103\53" +
        "\103\0\123\1\123\2\123\3\123\4\123\5\123\6\123\7\123\10\123\11\123\12\123\13\123\14\123\15\123\16\123\17\123\20\123\21\123\22\123\23\123\24\123\25\123\26\123\27\123\30\123\31\123\32\123\33\54\34\54\35\124\36\54\37\54\40\54\41\54\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\56\103\57" +
        "\103\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\33\54\34\54\35\54\36\54\37\54\40\54\41\54\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\56\103\57" +
        "\102\0\60\1\60\2\60\3\60\4\60\5\60\6\60\7\60\10\60\11\60\12\60\13\60\14\60\15\60\16\60\17\60\20\60\21\60\22\60\23\60\24\60\25\60\26\60\27\60\30\60\31\60\32\60\34\60\35\60\36\60\37\60\40\60\41\60\42\60\43\60\44\60\45\61\46\60\47\60\50\60\51\60\52\60\53\60\54\60\55\60\56\60\57\60\60\60\61\60\62\60\63\60\64\60\65\60\66\60\67\60\70\60\71\60\72\60\73\60\74\60\75\60\76\60\77\60\100\60\102\60\103\62" +
        "\0" +
        "\104\0\106\1\106\2\106\3\106\4\106\5\106\6\106\7\106\10\106\11\106\12\106\13\106\14\106\15\106\16\106\17\106\20\106\21\106\22\106\23\106\24\106\25\106\26\106\27\106\30\106\31\106\32\106\34\106\35\106\36\107\37\106\40\106\41\106\42\106\43\106\44\106\45\106\46\106\47\106\50\106\51\106\52\106\53\106\54\106\55\106\56\106\57\106\60\106\61\106\62\106\63\106\64\106\65\106\66\106\67\106\70\106\71\106\72\106\73\106\74\106\75\106\76\106\77\106\100\106\101\106\102\106\103\106\104\106" +
        "\104\0\125\1\125\2\125\3\125\4\125\5\125\6\125\7\125\10\125\11\125\12\125\13\125\14\125\15\125\16\125\17\125\20\125\21\125\22\125\23\125\24\125\25\125\26\125\27\125\30\125\31\125\32\125\34\125\35\125\36\125\37\125\40\125\41\125\42\125\43\125\44\125\45\125\46\125\47\126\50\125\51\125\52\125\53\125\54\125\55\125\56\125\57\125\60\125\61\125\62\125\63\125\64\125\65\125\66\125\67\125\70\125\71\125\72\125\73\125\74\125\75\125\76\125\77\125\100\125\101\125\102\125\103\125\104\125" +
        "\1\2\127" +
        "\1\10\130" +
        "\1\15\131" +
        "\1\12\132" +
        "\1\6\133" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\120\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\135\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\136\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\137\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\103\0\123\1\123\2\123\3\123\4\123\5\123\6\123\7\123\10\123\11\123\12\123\13\123\14\123\15\123\16\123\17\123\20\123\21\123\22\123\23\123\24\123\25\123\26\123\27\123\30\123\31\123\32\123\33\54\34\54\35\124\36\54\37\54\40\54\41\54\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\56\103\57" +
        "\103\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\33\54\34\54\35\54\36\54\37\54\40\54\41\54\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\140\103\57" +
        "\104\0\106\1\106\2\106\3\106\4\106\5\106\6\106\7\106\10\106\11\106\12\106\13\106\14\106\15\106\16\106\17\106\20\106\21\106\22\106\23\106\24\106\25\106\26\106\27\106\30\106\31\106\32\106\34\106\35\106\36\107\37\106\40\106\41\106\42\106\43\106\44\106\45\106\46\106\47\106\50\106\51\106\52\106\53\106\54\106\55\106\56\106\57\106\60\106\61\106\62\106\63\106\64\106\65\106\66\106\67\106\70\106\71\106\72\106\73\106\74\106\75\106\76\106\77\106\100\106\101\106\102\106\103\106\104\106" +
        "\0" +
        "\1\13\141" +
        "\1\20\142" +
        "\1\3\143" +
        "\1\13\144" +
        "\1\25\145" +
        "\0" +
        "\33\0\1\1\146\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\147\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\150\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\0" +
        "\0" +
        "\1\13\151" +
        "\1\13\152" +
        "\1\27\160" +
        "\1\22\154" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\155\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\156\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\0" +
        "\0" +
        "\0" +
        "\1\5\157" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\33\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1" +
        "\1\1\160" +
        "\0";
    static int[][] trans = unpackTrans(trans_packed);

    public Lexer(Reader reader) throws IOException{
        this.reader = reader;
        init();
    }

    public Lexer(File file) throws IOException {
        this.reader = new BufferedReader(new FileReader(file));
        init();
    }

    static boolean getBit(int[] arr, int state) {
        return ((arr[state / 32] >> (state % 32)) & 1) != 0;
    }

    static int[][] unpackTrans(String str) {
        int pos = 0;
        int max = str.charAt(pos++);
        List<int[]> list = new ArrayList<>();
        while (pos < str.length()) {
            int[] arr = new int[max];
            Arrays.fill(arr, -1);
            int trCount = str.charAt(pos++);
            for (int input = 0; input < trCount; input++) {
                //input -> target state
                arr[str.charAt(pos++)] = str.charAt(pos++);
            }
            list.add(arr);
        }
        return list.toArray(new int[0][]);
    }

    static int[] unpackCMap(String str){
        int pos = 0;
        int[] arr = new int[0x010FFFF];//covers all code points
        Arrays.fill(arr, -1);//unused chars leads error
        while(pos < str.length()){
            int left = str.charAt(pos++);
            int right = str.charAt(pos++);
            int id = str.charAt(pos++);
            for(int i = left;i <= right;i++){
                arr[i] = id;
            }
      }
      return arr;
    }

    void init() throws IOException{
      reader.read(yybuf, 0, bufSize);
    }

    void fill() throws IOException{
      if(bufPos == yybuf.length){
        char[] newBuf = new char[yybuf.length * 2];
        System.arraycopy(yybuf, 0, newBuf, 0, yybuf.length);
        reader.read(newBuf, bufPos, yybuf.length);
        yybuf = newBuf;
      }
    }

    String getText(){
      return new String(yybuf, bufStart, bufPos - bufStart);
    }

    String findExpected(int from){
        StringBuilder sb = new StringBuilder();
        for(int i = 0 ; i < trans[from].length;i++){
            sb.append(cMapRegex[i]);
            sb.append(",");
        }
        return sb.toString();
    }

    Token getEOF(){
        Token res =  new Token(EOF, "");
        res.name = "EOF";
        return res;
    }

    public Token next() throws IOException {
        Token tok = next_normal();
        if(getBit(skip, tok.type)){
          return next();
        }
        return tok;
    }

    public Token next_normal() throws IOException {
        fill();
        int curState = INITIAL;
        int lastState = -1;
        int startPos = yypos;
        int startLine = yyline;
        yychar = yybuf[bufPos];
        if (yychar == EOF) return getEOF();
        int backupState = -1;
        while (true) {
            fill();
            yychar = yybuf[bufPos];
            if(yychar == EOF){
                curState = -1;
            }else{
                backupState = curState;
                if(cMap[yychar] == -1){
                    throw new IOException(String.format("unknown input=%c(%d)",yychar, yychar));
                }
                curState = trans[curState][cMap[yychar]];
            }
            if (curState == -1) {
                if (lastState != -1) {
                    Token token = new Token(ids[lastState], getText());
                    token.offset = startPos;
                    token.name = names[ids[lastState]];
                    token.line = startLine;
                    bufStart = bufPos;
                    return token;
                }
                else {
                    throw new IOException(String.format("invalid input=%c(%d) buf='%s' expecting=%s",yychar,yychar,getText(),findExpected(backupState)));
                    //throw new IOException("invalid input=" + (char)yychar + "(" + yychar + ") " + " yybuf= " + getText());
                }
            }
            else {
                if (getBit(accepting, curState)) lastState = curState;
                if(yychar == '\n'){
                    yyline++;
                    if(bufPos > 0 && yybuf[bufPos - 1] == '\r'){
                        yyline--;
                    }
                }
                else if(yychar == '\r'){
                    yyline++;
                }
                bufPos++;
                yypos++;
            }
        }
    }
}
