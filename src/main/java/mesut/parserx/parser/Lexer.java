package mesut.parserx.parser;

import java.io.*;
import java.util.*;

public class Lexer {

    static String cMapPacked = "\142\142\14\152\152\2\146\146\1\156\156\5\162\162\13\172\172\26\176\176\67\76\76\35\52\52\37\72\72\42\56\56\45\42\42\41\12\12\104\46\46\63\136\136\36\166\170\31\16\37\75\57\57\57\147\147\4\137\137\0"+
            "\43\43\53\47\47\44\73\73\46\53\53\56\133\133\40\77\77\43\143\143\3\153\153\12\157\157\20\163\163\21\173\173\71\13\14\76\74\74\60\150\150\11\144\144\7\164\164\24\174\174\73\50\50\55\54\54\66\40\40\52"+
            "\44\44\62\140\140\50\100\100\47\134\134\103\154\154\17\160\160\23\0\10\74\60\71\32\u03b6\uffff\77\177\u03b4\100\135\134\33\145\145\6\11\11\34\15\15\101\41\41\51\51\51\54\55\55\65\45\45\64\151\151\10\141\141\15"+
            "\135\135\102\75\75\61\155\155\16\165\165\25\171\171\27\u03b5\u03b5\70\175\175\72\161\161\22\101\132\30";
    //input -> input id
    static int[] cMap = unpackCMap(cMapPacked);
    //input id -> regex string for error reporting
    static String[] cMapRegex = {"_", "f", "j", "c", "g", "n", "e", "d", "i", "h", "k", "r", "b", "a", "m", "l", "o", "s", "q", "p", "t", "u", "z", "y", "A-Z", "v-x", "0-9", "]-\\", "\\t", ">", "^", "*", "[", "\"", ":", "?", "'", ".", ";", "@", "`", "!", "\\u0020", "#", ")", "(", "+", "/", "<", "=", "$", "&", "%", "-", ",", "~", "\\u03b5", "{", "}", "|", "\\u0000-\\b", "\\u000e-\\u001f", "\\u000b-\\f", "\\u03b6-\\uffff", "\\u007f-\\u03b4", "\\r", "]", "\\\\", "\\n"};
    int[] skip = {0,28};
    int[] accepting = {-21010434,-132864769,37683363,3112031};
    //boolean[] after = {$after_list$};
    //id -> token name
    String[] names = {"EOF","BOOLEAN","OPTIONS","TOKEN","SKIP","INCLUDE","START","EPSILON","LEFT","RIGHT","JOIN","IDENT","CALL_BEGIN","SHORTCUT","BRACKET","STRING","CHAR","NUMBER","LP","RP",
"LBRACE","RBRACE","STAR","PLUS","QUES","POW","SEPARATOR","TILDE","HASH","COMMA","OR","DOT","SEMI","MINUS","LINE_COMMENT","BLOCK_COMMENT","WS"};
    //state->token id
    int[] ids = {0,11,11,11,11,11,11,17,36,25,22,0,0,26,24,0,31,32,28,19,18,
            23,0,0,0,33,29,27,7,20,21,30,0,12,11,11,11,11,11,11,0,
            0,14,0,0,15,0,0,0,0,16,0,34,0,0,0,0,0,0,0,11,
            11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,
            11,11,4,1,11,0,0,0,35,0,0,0,0,0,0,0,11,11,3,13,
            0,10,0,0,0,8,11,11,3,6,0,0,9,5,2,0,0};
    static final int INITIAL = 0;
    static final int EOF = 0;
    Reader reader;
    int yypos = 0;//pos in file
    int yyline = 1;
    int yychar;
    public static int bufSize = 100;
    int bufPos = 0;//pos in buffer
    int bufStart = bufPos;
    int bufEnd;
    char[] yybuf = new char[bufSize];
    static String trans_packed = "\105" +
        "\66\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7\1\10\3\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\4\21\5\22\1\23\1\24\6\25\1\26\1\27\1\30\1\31\1\32\7\34\10\36\11\37\12\40\13\41\14\42\15\43\16\44\17\45\20\46\21\52\10\53\22\54\23\55\24\56\25\57\26\61\15\64\30\65\31\66\32\67\33\70\34\71\35\72\36\73\37\101\10\104\10" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\42\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\43\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\44\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\45\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\46\14\1\15\1\16\1\17\1\20\47\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\1\32\7" +
        "\4\101\10\104\10\52\10\34\10" +
        "\0" +
        "\0" +
        "\103\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\51\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\102\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\34\54\35\54\36\54\37\54\40\54\41\55\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\54\103\56" +
        "\2\61\15\42\0" +
        "\0" +
        "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\62\45\61\46\61\47\61\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\2\57\64\37\65" +
        "\0" +
        "\5\21\66\2\67\6\70\13\71\17\72" +
        "\1\35\15" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\74\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\75\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\76\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\77\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\100\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\101\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\103\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\103\0\102\1\102\2\102\3\102\4\102\5\102\6\102\7\102\10\102\11\102\12\102\13\102\14\102\15\102\16\102\17\102\20\102\21\102\22\102\23\102\24\102\25\102\26\102\27\102\30\102\31\102\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\0" +
        "\103\0\103\1\103\2\103\3\103\4\103\5\103\6\103\7\103\10\103\11\103\12\103\13\103\14\103\15\103\16\103\17\103\20\103\21\103\22\103\23\103\24\103\25\103\26\103\27\103\30\103\31\103\32\103\34\103\35\103\36\103\37\103\40\103\41\103\42\103\43\103\44\103\45\103\46\103\47\103\50\103\51\103\52\103\53\103\54\103\55\103\56\103\57\103\60\103\61\103\62\103\63\103\64\103\65\103\66\103\67\103\70\103\71\103\72\103\73\103\74\103\75\103\76\103\77\103\100\103\101\103\102\103\103\103" +
        "\102\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\34\54\35\54\36\54\37\54\40\54\41\55\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\54\103\56" +
        "\0" +
        "\103\0\104\1\104\2\104\3\104\4\104\5\104\6\104\7\104\10\104\11\104\12\104\13\104\14\104\15\104\16\104\17\104\20\104\21\104\22\104\23\104\24\104\25\104\26\104\27\104\30\104\31\104\32\104\34\104\35\104\36\104\37\104\40\104\41\104\42\104\43\104\44\104\45\104\46\104\47\104\50\104\51\104\52\104\53\104\54\104\55\104\56\104\57\104\60\104\61\104\62\104\63\104\64\104\65\104\66\104\67\104\70\104\71\104\72\104\73\104\74\104\75\104\76\104\77\104\100\104\101\104\102\104\103\104" +
        "\0" +
        "\0" +
        "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\62\45\61\46\61\47\61\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
        "\0" +
        "\103\0\106\1\106\2\106\3\106\4\106\5\106\6\106\7\106\10\106\11\106\12\106\13\106\14\106\15\106\16\106\17\106\20\106\21\106\22\106\23\106\24\106\25\106\26\106\27\106\30\106\31\106\32\106\34\106\35\106\36\106\37\106\40\106\41\106\42\106\43\106\44\106\45\106\46\106\47\106\50\106\51\106\52\106\53\106\54\106\55\106\56\106\57\106\60\106\61\106\62\106\63\106\64\106\65\106\66\106\67\106\70\106\71\106\72\106\73\106\74\106\75\106\76\106\77\106\100\106\101\106\102\106\103\106" +
        "\103\0\64\1\64\2\64\3\64\4\64\5\64\6\64\7\64\10\64\11\64\12\64\13\64\14\64\15\64\16\64\17\64\20\64\21\64\22\64\23\64\24\64\25\64\26\64\27\64\30\64\31\64\32\64\34\64\35\64\36\64\37\64\40\64\41\64\42\64\43\64\44\64\45\64\46\64\47\64\50\64\51\64\52\64\53\64\54\64\55\64\56\64\57\64\60\64\61\64\62\64\63\64\64\64\65\64\66\64\67\64\70\64\71\64\72\64\73\64\74\64\75\64\76\64\77\64\100\64\101\64\102\64\103\64" +
        "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
        "\1\24\112" +
        "\1\20\113" +
        "\2\23\114\16\115" +
        "\1\10\116" +
        "\1\6\117" +
        "\0" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\120\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\121\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\122\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\123\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\124\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\125\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\103\0\126\1\126\2\126\3\126\4\126\5\126\6\126\7\126\10\126\11\126\12\126\13\126\14\126\15\126\16\126\17\126\20\126\21\126\22\126\23\126\24\126\25\126\26\126\27\126\30\126\31\126\32\126\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\127\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\103\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\102\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\34\54\35\54\36\54\37\54\40\54\41\55\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\54\103\56" +
        "\0" +
        "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\62\45\61\46\61\47\61\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
        "\0" +
        "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
        "\104\0\130\1\130\2\130\3\130\4\130\5\130\6\130\7\130\10\130\11\130\12\130\13\130\14\130\15\130\16\130\17\130\20\130\21\130\22\130\23\130\24\130\25\130\26\130\27\130\30\130\31\130\32\130\34\130\35\130\36\130\37\130\40\130\41\130\42\130\43\130\44\130\45\130\46\130\47\130\50\130\51\130\52\130\53\130\54\130\55\130\56\130\57\131\60\130\61\130\62\130\63\130\64\130\65\130\66\130\67\130\70\130\71\130\72\130\73\130\74\130\75\130\76\130\77\130\100\130\101\130\102\130\103\130\104\130" +
        "\1\15\132" +
        "\1\10\133" +
        "\1\21\134" +
        "\1\23\135" +
        "\1\4\136" +
        "\1\1\137" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\124\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\141\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\142\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\143\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\103\0\126\1\126\2\126\3\126\4\126\5\126\6\126\7\126\10\126\11\126\12\126\13\126\14\126\15\126\16\126\17\126\20\126\21\126\22\126\23\126\24\126\25\126\26\126\27\126\30\126\31\126\32\126\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\127\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\103\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\144\103\53" +
        "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
        "\0" +
        "\1\13\145" +
        "\1\5\146" +
        "\1\10\147" +
        "\1\24\150" +
        "\1\11\151" +
        "\1\24\152" +
        "\0" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\153\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\154\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\155\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\0" +
        "\1\24\156" +
        "\0" +
        "\1\17\157" +
        "\1\27\34" +
        "\1\24\161" +
        "\0" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\162\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\163\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\0" +
        "\1\20\164" +
        "\0" +
        "\0" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\34\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\55\41" +
        "\1\5\34" +
        "\0";
    static int[][] trans = unpackTrans(trans_packed);

    public Lexer(Reader reader) throws IOException{
        this.reader = reader;
        init();
    }

    public Lexer(File file) throws IOException {
        this.reader = new BufferedReader(new FileReader(file));
        init();
    }

    static boolean getBit(int[] arr, int state) {
        return ((arr[state / 32] >> (state % 32)) & 1) != 0;
    }

    static int[][] unpackTrans(String str) {
        int pos = 0;
        int max = str.charAt(pos++);
        List<int[]> list = new ArrayList<>();
        while (pos < str.length()) {
            int[] arr = new int[max];
            Arrays.fill(arr, -1);
            int trCount = str.charAt(pos++);
            for (int input = 0; input < trCount; input++) {
                //input -> target state
                arr[str.charAt(pos++)] = str.charAt(pos++);
            }
            list.add(arr);
        }
        return list.toArray(new int[0][]);
    }

    static int[] unpackCMap(String str){
        int pos = 0;
        int[] arr = new int[0x010FFFF];//covers all code points
        Arrays.fill(arr, -1);//unused chars leads error
        while(pos < str.length()){
            int left = str.charAt(pos++);
            int right = str.charAt(pos++);
            int id = str.charAt(pos++);
            for(int i = left;i <= right;i++){
                arr[i] = id;
            }
      }
      return arr;
    }

    void init() throws IOException{
      reader.read(yybuf, 0, bufSize);
    }

    void fill() throws IOException{
      if(bufPos == yybuf.length){
        char[] newBuf = new char[yybuf.length * 2];
        System.arraycopy(yybuf, 0, newBuf, 0, yybuf.length);
        reader.read(newBuf, bufPos, yybuf.length);
        yybuf = newBuf;
      }
    }

    String getText(){
      return new String(yybuf, bufStart, bufPos - bufStart);
    }

    String findExpected(int from){
        StringBuilder sb = new StringBuilder();
        for(int i = 0 ; i < trans[from].length;i++){
            sb.append(cMapRegex[i]);
            sb.append(",");
        }
        return sb.toString();
    }

    Token getEOF(){
        Token res =  new Token(EOF, "");
        res.name = "EOF";
        res.line = yyline;
        return res;
    }

    public Token next() throws IOException {
        Token tok = next_normal();
        if(getBit(skip, tok.type)){
          return next();
        }
        return tok;
    }

    public Token next_normal() throws IOException {
        fill();
        int curState = INITIAL;
        int lastState = -1;
        int startPos = yypos;
        int startLine = yyline;
        yychar = yybuf[bufPos];
        if (yychar == EOF) return getEOF();
        int backupState = -1;
        while (true) {
            fill();
            yychar = yybuf[bufPos];
            if(yychar == EOF){
                curState = -1;
            }else{
                backupState = curState;
                if(cMap[yychar] == -1){
                    throw new IOException(String.format("unknown input=%c(%d) pos=%s line=%d",yychar, yychar, yypos, yyline));
                }
                curState = trans[curState][cMap[yychar]];
            }
            if (curState == -1) {
                if (lastState != -1) {
                    Token token = new Token(ids[lastState], getText());
                    token.offset = startPos;
                    token.name = names[ids[lastState]];
                    token.line = startLine;
                    bufStart = bufPos;
                    /*if(!after[ids[lastState]]){
                      curState = INITIAL;
                    }*/
                    return token;
                }
                else {
                    throw new IOException(String.format("invalid input=%c(%d) pos=%s line=%d buf='%s' expecting=%s",yychar,yychar,yypos,yyline,getText(),findExpected(backupState)));
                }
            }
            else {
                if (getBit(accepting, curState)) lastState = curState;
                if(yychar == '\n'){
                    yyline++;
                    if(bufPos > 0 && yybuf[bufPos - 1] == '\r'){
                        yyline--;
                    }
                }
                else if(yychar == '\r'){
                    yyline++;
                }
                bufPos++;
                yypos++;
            }
        }
    }
}
