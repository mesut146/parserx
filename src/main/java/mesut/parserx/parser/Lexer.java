package mesut.parserx.parser;

import java.io.*;
import java.util.*;

public class Lexer {

    static String cMapPacked = "\142\142\14\152\152\2\146\146\1\156\156\5\162\162\13\172\172\26\176\176\67\76\76\35\52\52\37\72\72\42\56\56\45\42\42\41\12\12\104\46\46\63\136\136\36\166\170\31\16\37\75\177\ufffc\77\57\57\57\147\147\4"+
            "\137\137\0\43\43\53\47\47\44\73\73\46\53\53\56\133\133\40\77\77\43\143\143\3\153\153\12\157\157\20\163\163\21\173\173\71\13\14\76\ufffe\uffff\100\74\74\60\150\150\11\144\144\7\164\164\24\ufffd\ufffd\70\174\174\73"+
            "\50\50\55\54\54\66\40\40\52\44\44\62\140\140\50\100\100\47\134\134\103\154\154\17\160\160\23\0\10\74\60\71\32\135\134\33\145\145\6\11\11\34\15\15\101\41\41\51\51\51\54\55\55\65\45\45\64\151\151\10"+
            "\141\141\15\135\135\102\75\75\61\155\155\16\165\165\25\171\171\27\175\175\72\161\161\22\101\132\30";
    //input -> input id
    static int[] cMap = unpackCMap(cMapPacked);
    //input id -> regex string for error reporting
    static String[] cMapRegex = {"_", "f", "j", "c", "g", "n", "e", "d", "i", "h", "k", "r", "b", "a", "m", "l", "o", "s", "q", "p", "t", "u", "z", "y", "A-Z", "v-x", "0-9", "]-\\", "\\t", ">", "^", "*", "[", "\"", ":", "?", "'", ".", ";", "@", "`", "!", "\\u0020", "#", ")", "(", "+", "/", "<", "=", "$", "&", "%", "-", ",", "~", "\\ufffd", "{", "}", "|", "\\u0000-\\b", "\\u000e-\\u001f", "\\u000b-\\f", "\\u007f-\\ufffc", "\\ufffe-\\uffff", "\\r", "]", "\\\\", "\\n"};
    int[] skip = {0,28};
    int[] accepting = {-289445890,-131816193,75367495,6224062,0,0,0,0};
    //boolean[] after = {$after_list$};
    //id -> token name
    String[] names = {"EOF","BOOLEAN","OPTIONS","TOKEN","SKIP","INCLUDE","START","EPSILON","LEFT","RIGHT","JOIN","IDENT","CALL_BEGIN","SHORTCUT","BRACKET","STRING","CHAR","NUMBER","LP","RP",
"LBRACE","RBRACE","STAR","PLUS","QUES","POW","SEPARATOR","TILDE","HASH","COMMA","OR","DOT","SEMI","MINUS","LINE_COMMENT","BLOCK_COMMENT","WS"};
    //state->token id
    int[] ids = {0,11,11,11,11,11,11,17,36,25,22,0,0,0,24,0,31,32,28,19,18,
            23,0,0,0,33,29,27,0,20,21,30,11,12,11,11,11,11,11,11,0,
            0,14,0,0,15,0,0,0,0,16,0,0,34,0,0,0,0,0,0,0,
            11,11,11,11,11,11,0,0,0,26,0,0,0,0,0,0,0,0,0,0,
            11,11,11,4,0,11,0,0,0,35,0,0,0,0,0,0,1,11,11,3,
            13,0,10,0,0,0,8,11,11,3,6,0,7,9,5,2,0};
    static final int INITIAL = 0;
    static final int EOF = 0;
    Reader reader;
    int yypos = 0;//pos in file
    int yyline = 1;
    int yychar;
    public static int bufSize = 100;
    int bufPos = 0;//pos in buffer
    int bufStart = bufPos;
    int bufEnd;
    char[] yybuf = new char[bufSize];
    static String trans_packed = "\105" +
        "\66\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7\1\10\3\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\4\21\5\22\1\23\1\24\6\25\1\26\1\27\1\30\1\31\1\32\7\34\10\36\11\37\12\40\13\41\14\42\106\43\16\44\17\45\20\46\21\52\10\53\22\54\23\55\24\56\25\57\26\61\106\64\30\65\31\66\32\67\33\70\34\71\35\72\36\73\37\101\10\104\10" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\42\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\43\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\44\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\45\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\46\14\40\15\40\16\40\17\40\20\47\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\1\32\7" +
        "\4\101\10\104\10\52\10\34\10" +
        "\0" +
        "\0" +
        "\103\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\51\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\102\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\34\54\35\54\36\54\37\54\40\54\41\55\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\54\103\56" +
        "\0" +
        "\0" +
        "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\62\45\61\46\61\47\61\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\0" +
        "\2\37\64\57\65" +
        "\0" +
        "\5\21\66\2\67\6\70\13\71\17\72" +
        "\1\35\106" +
        "\0" +
        "\0" +
        "\1\70\161" +
        "\0" +
        "\0" +
        "\0" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\0" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\75\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\76\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\77\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\100\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\101\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\102\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\103\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\103\0\103\1\103\2\103\3\103\4\103\5\103\6\103\7\103\10\103\11\103\12\103\13\103\14\103\15\103\16\103\17\103\20\103\21\103\22\103\23\103\24\103\25\103\26\103\27\103\30\103\31\103\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\0" +
        "\103\0\104\1\104\2\104\3\104\4\104\5\104\6\104\7\104\10\104\11\104\12\104\13\104\14\104\15\104\16\104\17\104\20\104\21\104\22\104\23\104\24\104\25\104\26\104\27\104\30\104\31\104\32\104\34\104\35\104\36\104\37\104\40\104\41\104\42\104\43\104\44\104\45\104\46\104\47\104\50\104\51\104\52\104\53\104\54\104\55\104\56\104\57\104\60\104\61\104\62\104\63\104\64\104\65\104\66\104\67\104\70\104\71\104\72\104\73\104\74\104\75\104\76\104\77\104\100\104\101\104\102\104\103\104" +
        "\102\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\34\54\35\54\36\54\37\54\40\54\41\55\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\54\103\56" +
        "\0" +
        "\103\0\105\1\105\2\105\3\105\4\105\5\105\6\105\7\105\10\105\11\105\12\105\13\105\14\105\15\105\16\105\17\105\20\105\21\105\22\105\23\105\24\105\25\105\26\105\27\105\30\105\31\105\32\105\34\105\35\105\36\105\37\105\40\105\41\105\42\105\43\105\44\105\45\105\46\105\47\105\50\105\51\105\52\105\53\105\54\105\55\105\56\105\57\105\60\105\61\105\62\105\63\105\64\105\65\105\66\105\67\105\70\105\71\105\72\105\73\105\74\105\75\105\76\105\77\105\100\105\101\105\102\105\103\105" +
        "\0" +
        "\0" +
        "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\62\45\61\46\61\47\61\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
        "\0" +
        "\103\0\107\1\107\2\107\3\107\4\107\5\107\6\107\7\107\10\107\11\107\12\107\13\107\14\107\15\107\16\107\17\107\20\107\21\107\22\107\23\107\24\107\25\107\26\107\27\107\30\107\31\107\32\107\34\107\35\107\36\107\37\107\40\107\41\107\42\107\43\107\44\107\45\107\46\107\47\107\50\107\51\107\52\107\53\107\54\107\55\107\56\107\57\107\60\107\61\107\62\107\63\107\64\107\65\107\66\107\67\107\70\107\71\107\72\107\73\107\74\107\75\107\76\107\77\107\100\107\101\107\102\107\103\107" +
        "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
        "\103\0\65\1\65\2\65\3\65\4\65\5\65\6\65\7\65\10\65\11\65\12\65\13\65\14\65\15\65\16\65\17\65\20\65\21\65\22\65\23\65\24\65\25\65\26\65\27\65\30\65\31\65\32\65\34\65\35\65\36\65\37\65\40\65\41\65\42\65\43\65\44\65\45\65\46\65\47\65\50\65\51\65\52\65\53\65\54\65\55\65\56\65\57\65\60\65\61\65\62\65\63\65\64\65\65\65\66\65\67\65\70\65\71\65\72\65\73\65\74\65\75\65\76\65\77\65\100\65\101\65\102\65\103\65" +
        "\1\24\113" +
        "\1\20\114" +
        "\2\23\115\16\116" +
        "\1\10\117" +
        "\1\6\120" +
        "\0" +
        "\0" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\121\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\122\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\123\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\124\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\141\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\126\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\103\0\127\1\127\2\127\3\127\4\127\5\127\6\127\7\127\10\127\11\127\12\127\13\127\14\127\15\127\16\127\17\127\20\127\21\127\22\127\23\127\24\127\25\127\26\127\27\127\30\127\31\127\32\127\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\130\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\103\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\102\0\54\1\54\2\54\3\54\4\54\5\54\6\54\7\54\10\54\11\54\12\54\13\54\14\54\15\54\16\54\17\54\20\54\21\54\22\54\23\54\24\54\25\54\26\54\27\54\30\54\31\54\32\54\34\54\35\54\36\54\37\54\40\54\41\55\42\54\43\54\44\54\45\54\46\54\47\54\50\54\51\54\52\54\53\54\54\54\55\54\56\54\57\54\60\54\61\54\62\54\63\54\64\54\65\54\66\54\67\54\70\54\71\54\72\54\73\54\74\54\75\54\76\54\77\54\100\54\102\54\103\56" +
        "\2\61\106\42\0" +
        "\102\0\61\1\61\2\61\3\61\4\61\5\61\6\61\7\61\10\61\11\61\12\61\13\61\14\61\15\61\16\61\17\61\20\61\21\61\22\61\23\61\24\61\25\61\26\61\27\61\30\61\31\61\32\61\34\61\35\61\36\61\37\61\40\61\41\61\42\61\43\61\44\62\45\61\46\61\47\61\50\61\51\61\52\61\53\61\54\61\55\61\56\61\57\61\60\61\61\61\62\61\63\61\64\61\65\61\66\61\67\61\70\61\71\61\72\61\73\61\74\61\75\61\76\61\77\61\100\61\102\61\103\63" +
        "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
        "\104\0\131\1\131\2\131\3\131\4\131\5\131\6\131\7\131\10\131\11\131\12\131\13\131\14\131\15\131\16\131\17\131\20\131\21\131\22\131\23\131\24\131\25\131\26\131\27\131\30\131\31\131\32\131\34\131\35\131\36\131\37\131\40\131\41\131\42\131\43\131\44\131\45\131\46\131\47\131\50\131\51\131\52\131\53\131\54\131\55\131\56\131\57\132\60\131\61\131\62\131\63\131\64\131\65\131\66\131\67\131\70\131\71\131\72\131\73\131\74\131\75\131\76\131\77\131\100\131\101\131\102\131\103\131\104\131" +
        "\0" +
        "\1\15\133" +
        "\1\10\134" +
        "\1\21\135" +
        "\1\23\136" +
        "\1\4\137" +
        "\1\1\140" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\141\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\142\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\143\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\0" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\144\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\103\0\127\1\127\2\127\3\127\4\127\5\127\6\127\7\127\10\127\11\127\12\127\13\127\14\127\15\127\16\127\17\127\20\127\21\127\22\127\23\127\24\127\25\127\26\127\27\127\30\127\31\127\32\127\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\130\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\52\103\53" +
        "\103\0\50\1\50\2\50\3\50\4\50\5\50\6\50\7\50\10\50\11\50\12\50\13\50\14\50\15\50\16\50\17\50\20\50\21\50\22\50\23\50\24\50\25\50\26\50\27\50\30\50\31\50\32\50\33\50\34\50\35\50\36\50\37\50\40\50\41\50\42\50\43\50\44\50\45\50\46\50\47\50\50\50\51\50\52\50\53\50\54\50\55\50\56\50\57\50\60\50\61\50\62\50\63\50\64\50\65\50\66\50\67\50\70\50\71\50\72\50\73\50\74\50\75\50\76\50\77\50\100\50\102\145\103\53" +
        "\104\0\110\1\110\2\110\3\110\4\110\5\110\6\110\7\110\10\110\11\110\12\110\13\110\14\110\15\110\16\110\17\110\20\110\21\110\22\110\23\110\24\110\25\110\26\110\27\110\30\110\31\110\32\110\34\110\35\110\36\110\37\111\40\110\41\110\42\110\43\110\44\110\45\110\46\110\47\110\50\110\51\110\52\110\53\110\54\110\55\110\56\110\57\110\60\110\61\110\62\110\63\110\64\110\65\110\66\110\67\110\70\110\71\110\72\110\73\110\74\110\75\110\76\110\77\110\100\110\101\110\102\110\103\110\104\110" +
        "\0" +
        "\1\13\146" +
        "\1\5\147" +
        "\1\10\150" +
        "\1\24\151" +
        "\1\11\152" +
        "\1\24\153" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\154\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\155\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\156\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\0" +
        "\1\24\157" +
        "\0" +
        "\1\17\160" +
        "\1\27\161" +
        "\1\24\162" +
        "\0" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\163\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\164\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\0" +
        "\1\20\165" +
        "\0" +
        "\0" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\34\0\40\1\40\2\40\3\40\4\40\5\40\6\40\7\40\10\40\11\40\12\40\13\40\14\40\15\40\16\40\17\40\20\40\21\40\22\40\23\40\24\40\25\40\26\40\27\40\30\40\31\40\32\40\55\41" +
        "\1\5\161";
    static int[][] trans = unpackTrans(trans_packed);

    public Lexer(Reader reader) throws IOException{
        this.reader = reader;
        init();
    }

    public Lexer(File file) throws IOException {
        this.reader = new BufferedReader(new FileReader(file));
        init();
    }

    static boolean getBit(int[] arr, int state) {
        return ((arr[state / 32] >> (state % 32)) & 1) != 0;
    }

    static int[][] unpackTrans(String str) {
        int pos = 0;
        int max = str.charAt(pos++);
        List<int[]> list = new ArrayList<>();
        while (pos < str.length()) {
            int[] arr = new int[max];
            Arrays.fill(arr, -1);
            int trCount = str.charAt(pos++);
            for (int input = 0; input < trCount; input++) {
                //input -> target state
                arr[str.charAt(pos++)] = str.charAt(pos++);
            }
            list.add(arr);
        }
        return list.toArray(new int[0][]);
    }

    static int[] unpackCMap(String str){
        int pos = 0;
        int[] arr = new int[0x010FFFF];//covers all code points
        Arrays.fill(arr, -1);//unused chars leads error
        while(pos < str.length()){
            int left = str.charAt(pos++);
            int right = str.charAt(pos++);
            int id = str.charAt(pos++);
            for(int i = left;i <= right;i++){
                arr[i] = id;
            }
      }
      return arr;
    }

    void init() throws IOException{
      reader.read(yybuf, 0, bufSize);
    }

    void fill() throws IOException{
      if(bufPos == yybuf.length){
        char[] newBuf = new char[yybuf.length * 2];
        System.arraycopy(yybuf, 0, newBuf, 0, yybuf.length);
        reader.read(newBuf, bufPos, yybuf.length);
        yybuf = newBuf;
      }
    }

    String getText(){
      return new String(yybuf, bufStart, bufPos - bufStart);
    }

    String findExpected(int from){
        StringBuilder sb = new StringBuilder();
        for(int i = 0 ; i < trans[from].length;i++){
            sb.append(cMapRegex[i]);
            sb.append(",");
        }
        return sb.toString();
    }

    Token getEOF(){
        Token res =  new Token(EOF, "");
        res.name = "EOF";
        return res;
    }

    public Token next() throws IOException {
        Token tok = next_normal();
        if(getBit(skip, tok.type)){
          return next();
        }
        return tok;
    }

    public Token next_normal() throws IOException {
        fill();
        int curState = INITIAL;
        int lastState = -1;
        int startPos = yypos;
        int startLine = yyline;
        yychar = yybuf[bufPos];
        if (yychar == EOF) return getEOF();
        int backupState = -1;
        while (true) {
            fill();
            yychar = yybuf[bufPos];
            if(yychar == EOF){
                curState = -1;
            }else{
                backupState = curState;
                if(cMap[yychar] == -1){
                    throw new IOException(String.format("unknown input=%c(%d) pos=%s line=%d",yychar, yychar, yypos, yyline));
                }
                curState = trans[curState][cMap[yychar]];
            }
            if (curState == -1) {
                if (lastState != -1) {
                    Token token = new Token(ids[lastState], getText());
                    token.offset = startPos;
                    token.name = names[ids[lastState]];
                    token.line = startLine;
                    bufStart = bufPos;
                    /*if(!after[ids[lastState]]){
                      curState = INITIAL;
                    }*/
                    return token;
                }
                else {
                    throw new IOException(String.format("invalid input=%c(%d) pos=%s line=%d buf='%s' expecting=%s",yychar,yychar,yypos,yyline,getText(),findExpected(backupState)));
                }
            }
            else {
                if (getBit(accepting, curState)) lastState = curState;
                if(yychar == '\n'){
                    yyline++;
                    if(bufPos > 0 && yybuf[bufPos - 1] == '\r'){
                        yyline--;
                    }
                }
                else if(yychar == '\r'){
                    yyline++;
                }
                bufPos++;
                yypos++;
            }
        }
    }
}
