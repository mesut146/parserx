#include <sstream>
#include "$lexer_class$.h"

$lexer_class$::$lexer_class$(std::istream& reader) : reader(reader){
    init();
}

/*$lexer_class$(File file) {
    this.reader = new BufferedReader(new FileReader(file));
    init();
}*/

bool $lexer_class$::getBit(const int* arr, int state) {
    return ((arr[state / 32] >> (state % 32)) & 1) != 0;
}

int** $lexer_class$::unpackTrans(const char* str) {
    int len = $trans_str_len$;
    int pos = 0;
    static int res[max_trans][max_input];
    std::fill(&res[0][0], &res[0][0] + max_trans * max_input, -1);
    int state = 0;
    while (pos < len) {
        int trCount = str[pos++];
        for (int i = 0; i < trCount; i++) {
            //state,input -> target state
            int input = str[pos++];
            int target = str[pos++];
            res[state][input] = target;
        }
        state++;
    }
    int **ptr = new int *[max_trans];
    for (int i = 0; i < max_trans; i++)
    {
        ptr[i] = res[i];
    }
    return ptr;
}

int* $lexer_class$::unpackCMap(const wchar_t* str){
    int pos = 0;
    static int* arr = new int[0x010FFFF];//covers all code points
    std::fill(arr, arr + 0x010FFFF, -1);//unused chars leads error
    while(pos < max_input * 3){
        int left = str[pos++];
        int right = str[pos++];
        int id = str[pos++];
        for(int i = left;i <= right;i++){
            arr[i] = id;
        }
  }
  return arr;
}

void $lexer_class$::init(){
  yybuf = new char[bufSize];
  reader.get(yybuf, bufSize);
}

void $lexer_class$::fill(){
  if(bufPos == bufSize){
    char newBuf[bufSize * 2];
    std::copy(yybuf, yybuf + sizeof(yybuf), newBuf);
    reader.get(newBuf + bufPos, bufSize);
    yybuf = newBuf;
    bufSize *= 2;
  }
}

std::string $lexer_class$::getText(){
  return std::string(yybuf, bufStart, bufPos - bufStart);
}

std::string $lexer_class$::findExpected(int from){
    std::stringstream sb;
    for(int i = 0 ; i < max_input;i++){
        sb << cMapRegex[i];
        sb << ",";
    }
    return sb.str();
}

$token_class$* $lexer_class$::getEOF(){
    $token_class$* res = new $token_class$(EOF_, "");
    res->name = "EOF";
    return res;
}

void Lexer::err(int backupState)
{
    std::stringstream ss;
    ss << "invalid input=" << yychar << "(" << (int)yychar << ") " << "buf='" << getText() << "'"
       << "expecting=" << findExpected(backupState);
    throw std::runtime_error(ss.str());
}

$token_class$* $lexer_class$::$next_token$() {
    $token_class$* tok = $next_token$_normal();
    if(getBit(skip, tok->type)){
      return $next_token$();
    }
    return tok;
}

$token_class$* $lexer_class$::$next_token$_normal(){
    fill();
    int curState = INITIAL;
    int lastState = -1;
    int startPos = yypos;
    int startLine = yyline;
    yychar = yybuf[bufPos];
    if (yychar == EOF_) return getEOF();
    int backupState = -1;
    while (true) {
        fill();
        yychar = yybuf[bufPos];
        if(yychar == EOF_){
            curState = -1;
        }else{
            backupState = curState;
            if(cMap[yychar] == -1){
                err(backupState);
            }
            curState = trans[curState][cMap[yychar]];
        }
        if (curState == -1) {
            if (lastState != -1) {
                $token_class$* token = new $token_class$(ids[lastState], getText());
                token->offset = startPos;
                token->name = names[ids[lastState]];
                token->line = startLine;
                bufStart = bufPos;
                return token;
            }
            else {
                err(backupState);
            }
        }
        else {
            if (getBit(accepting, curState)) lastState = curState;
            if(yychar == '\n'){
                yyline++;
                if(bufPos > 0 && yybuf[bufPos - 1] == '\r'){
                    yyline--;
                }
            }
            else if(yychar == '\r'){
                yyline++;
            }
            bufPos++;
            yypos++;
        }
    }
}

