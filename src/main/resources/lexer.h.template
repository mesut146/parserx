#pragma once

$namespace_begin$

#include <vector>
#include <string>
#include <iostream>
#include "$token_class$.h"


constexpr const wchar_t* cMapPacked = $cMap$;
//input id -> regex string for error reporting
const std::string cMapRegex[] = {$cMapRegex$};
const int skip[] = {$skip_list$};
const int accepting[] = {$final_list$};
//id -> token name
const std::string names[] = {$name_list$};
//state->token id
const int ids[] = {$id_list$};
constexpr const char* trans_packed = $trans$;
const int max_input = $max_input$ + 1;
const int max_trans = $max_trans$ + 1;

class $lexer_class$ {

    static const int INITIAL = 0;
    static const int EOF_ = 0;
    std::istream& reader;
    int yypos = 0;//pos in file
    int yyline = 1;
    int yychar;
    int bufSize = 100;
    int bufPos = 0;//pos in buffer
    int bufStart = bufPos;
    char* yybuf;

    public:

    $lexer_class$(std::istream& reader);

    //$lexer_class$(File file);

    static bool getBit(const int* arr, int state);

    static int** unpackTrans(const char* str);

    static int* unpackCMap(const wchar_t* str);

    void init();

    void fill();

    std::string getText();

    std::string findExpected(int from);

    $token_class$ getEOF();

    void err(int backupState);

    $token_class$ $next_token$();

    $token_class$ $next_token$_normal();

    //input -> input id
    int *cMap = unpackCMap(cMapPacked);
    //state,input id -> next state
    int **trans = unpackTrans(trans_packed);
};

$namespace_end$