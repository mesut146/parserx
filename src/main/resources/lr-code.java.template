$package$
import java.util.*;
import java.io.*;

public class $parser_class${
    Stack<Symbol> stack = new Stack<>();
    $lexer_class$ lexer;
    public static boolean debug = false;

    public $parser_class$($lexer_class$ lexer){
        this.lexer = lexer;
    }

    Symbol next() throws IOException{
        return new Symbol(lexer.$lexer_method$());
    }

}

//a token or a rule
class Symbol{
    $token_class$ token;
    public String name;
    public int id;
    public List<Symbol> children = new ArrayList<>();

    public Symbol(int id){
        this.id = id;
    }
    public Symbol($token_class$ token){
        this.token = token;
        this.id = token.type;
        this.name = token.name;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        if(token != null){
          sb.append(token.value);
        }
        else{
          for(Symbol ch : children){
            sb.append(ch);
          }
        }
        return sb.toString();
    }

    /*@Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("Symbol{");
        sb.append("id=").append(id);
        sb.append(", token=").append(token);
        sb.append(", name='").append(name).append('\'');
        sb.append('}');
        return sb.toString();
    }*/

}