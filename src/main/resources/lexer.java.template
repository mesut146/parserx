$package$
import java.io.*;
import java.util.*;

public class $lexer_class$ {

    static String cMapPacked = $cMap$;
    //input -> input id
    static int[] cMap = unpackCMap(cMapPacked);
    //input id -> regex string for error reporting
    static String[] cMapRegex = {$cMapRegex$};
    int[] skip = {$skip_list$};
    int[] accepting = {$final_list$};
    //id -> token name
    String[] names = {$name_list$};
    //state->token id
    int[] ids = {$id_list$};
    static final int INITIAL = 0;
    static final int EOF = 0;
    Reader reader;
    int yypos = 0;//pos in file
    int yyline = 1;
    int yychar;
    public static int bufSize = 10000;
    int bufPos = bufSize;//pos in buffer
    int bufStart = bufSize;
    int bufEnd;
    char[] yybuf = new char[bufSize];
    static String trans_packed = $trans$;
    static int[][] trans = unpackTrans(trans_packed);

    public $lexer_class$(Reader reader) {
        this.reader = reader;
    }

    public $lexer_class$(File file) throws FileNotFoundException {
        this.reader = new BufferedReader(new FileReader(file));
    }

    static boolean getBit(int[] arr, int state) {
        return ((arr[state / 32] >> (state % 32)) & 1) != 0;
    }

    static int[][] unpackTrans(String str) {
        int pos = 0;
        int max = str.charAt(pos++);
        List<int[]> list = new ArrayList<>();
        while (pos < str.length()) {
            int[] arr = new int[max];
            Arrays.fill(arr, -1);
            int trCount = str.charAt(pos++);
            for (int input = 0; input < trCount; input++) {
                //input -> target state
                arr[str.charAt(pos++)] = str.charAt(pos++);
            }
            list.add(arr);
        }
        return list.toArray(new int[0][]);
    }

    static int[] unpackCMap(String str){
        int pos = 0;
        int[] arr = new int[0x010FFFF];//covers all code points
        Arrays.fill(arr, -1);//unused chars leads error
        while(pos < str.length()){
            int left = str.charAt(pos++);
            int right = str.charAt(pos++);
            int id = str.charAt(pos++);
            for(int i = left;i <= right;i++){
                arr[i] = id;
            }
      }
      return arr;
    }

    void fill() throws IOException{
      if(bufPos == bufSize){
        char[] newBuf = new char[bufSize];
        System.arraycopy(yybuf, bufStart, newBuf, 0, bufPos - bufStart);
        reader.read(newBuf, bufPos - bufStart, bufSize - bufPos + bufStart);
        yybuf = newBuf;
        bufPos = bufPos - bufStart;
        bufStart = 0;
      }
    }

    String getText(){
      return new String(yybuf, bufStart, bufPos - bufStart);
    }

    String findExpected(int from){
        StringBuilder sb = new StringBuilder();
        for(int input : trans[from]){
            sb.append(cMapRegex[input]);
            sb.append(",");
        }
        return sb.toString();
    }

    public $token_class$ $next_token$() throws IOException {
        fill();
        int curState = INITIAL;
        int lastState = -1;
        int startPos = yypos;
        int startLine = yyline;
        yychar = yybuf[bufPos];
        if (yychar == EOF) return new Token(EOF, "EOF");
        int backupState = -1;
        while (true) {
            yychar = yybuf[bufPos];
            if(yychar == EOF){
                curState = -1;
            }else{
                backupState = curState;
                curState = trans[curState][cMap[yychar]];
                if(yychar == '\n'){
                    yyline++;
                }
                else if(yychar == '\r'){
                    if(yybuf[bufPos + 1] == '\n'){
                        //todo \n may have transition?
                        yyline++;
                        //bufPos++;
                        //yypos++;
                    }else{
                        yyline++;
                    }
                }
            }
            if (curState == -1) {
                if (lastState != -1) {
                    if (!getBit(skip, lastState)) {
                        Token token = new Token(ids[lastState], getText());
                        token.offset = startPos;
                        token.name = names[ids[lastState]];
                        token.line = startLine;
                        bufStart = bufPos;
                        return token;
                    }
                    bufStart = bufPos;
                    if (yychar == EOF) return new Token(EOF, "EOF");
                    if (getBit(skip, lastState)) return $next_token$();
                }
                else {
                    throw new IOException(String.format("invalid input=%c(%d) buf=%s expecting=%s",yychar,yychar,getText(),findExpected(backupState)));
                    //throw new IOException("invalid input=" + (char)yychar + "(" + yychar + ") " + " yybuf= " + getText());
                }
            }
            else {
                bufPos++;
                yypos++;
                if (getBit(accepting, curState)) lastState = curState;
            }
        }
    }
}
