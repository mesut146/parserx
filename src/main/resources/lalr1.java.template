$package$
import java.util.*;
import java.io.*;

public class $parser_class${
    $lexer_class$ lexer;
    Stack<Node> stack = new Stack<>();
    Stack<Integer> states = new Stack<>();
    //rule index -> rhs size
    static int[] rhs_sizes = {$rhs_sizes$};
    //rule index -> symbol id
    static int[] ruleIds = {$ruleIds$};
    static String table_packed = $table_packed$;
    static int[][] table = unpackTable(table_packed);
    //rule index -> rule name
    static String[] names = {$names$};
    //rule index -> alt number
    static int[] alt_map = {$alt_map$};
    static boolean[] isLoop = {$isLoop$};
    public static boolean debug = false;

    public $parser_class$($lexer_class$ lexer){
        this.lexer = lexer;
    }

    static int[][] unpackTable(String s){
      int i = 0;
      int states = s.charAt(i++);
      int symbols = s.charAt(i++);
      int[][] table = new int[states][symbols];
      int acc_state = s.charAt(i++);
      int acc_count = s.charAt(i++);
      while(acc_count-- > 0){
        table[acc_state][s.charAt(i++)] = 3;
      }
      int state = 0;
      while(i < s.length()){
        int sc = s.charAt(i++);//shift count
        while(sc-- > 0){
          int symbol = s.charAt(i++);
          int target = s.charAt(i++);
          table[state][symbol] = (target << 2) | 1;
        }
        int rc = s.charAt(i++);//reduce count
        while(rc-- > 0){
          int act = s.charAt(i++);//rule index
          int symc = s.charAt(i++);//symbol count
          while(symc-- > 0){
            table[state][s.charAt(i++)] = (act << 2) | 2;
          }
        }
        state++;
      }
      return table;
    }

    Node next() throws IOException{
        return new Node(lexer.$lexer_method$());
    }

    public Node parse() throws IOException{
        Node symbol = next();
        states.push(0);//initial state
        int state = 0;

        while(true){
          int action = table[state][symbol.id];
          if(action == 0){
            throw new RuntimeException("error in "+state+" sym="+symbol);
          }
          if((action & 3) == 1){
            //shift
            action >>= 2;
            if(debug)System.out.printf("shift to %s with %s\n",action,symbol);
            stack.push(symbol);
            states.push(action);
            symbol = next();
            state = action;
          }
          else if((action & 3) == 2){
            //reduce
            action >>= 2;
            if(debug)System.out.println("reduced " + names[action]+" index="+action);
            //action is rule index
            Node tmp = null;
            int size = rhs_sizes[action];
            Node[] rhs = new Node[size];
            while(size-- > 0){
              Node ch = stack.pop();
              ch.parent = tmp;
              rhs[size] = ch;
              states.pop();
            }
            if(isLoop[action]){
              tmp = rhs[0];
              tmp.children.add(rhs[1]);
              rhs[1].parent = tmp;
            }else{
              tmp = new Node(ruleIds[action]);
              tmp.alt = alt_map[action];
              tmp.name = names[action];
              tmp.children = new ArrayList<>(Arrays.asList(rhs));
            }
            stack.push(tmp);
            state = states.peek();
            if(debug)System.out.println("state = " + state);
            int act = table[state][tmp.id];
            act >>= 2;
            if(debug)System.out.println("goto " + act);
            state = act;
            states.push(state);
            //todo call ast builder
          }
          else{
            if(debug)System.out.println("accept");
            return stack.pop();
          }
        }
    }
}